/**
 */
package org.polarsys.chess.mobius.model.SAN.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.polarsys.chess.mobius.model.SAN.util.SANModelAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class SANModelItemProviderAdapterFactory extends SANModelAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public SANModelItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.polarsys.chess.mobius.model.SAN.SANModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SANModelItemProvider sanModelItemProvider;

	/**
	 * This creates an adapter for a {@link org.polarsys.chess.mobius.model.SAN.SANModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSANModelAdapter() {
		if (sanModelItemProvider == null) {
			sanModelItemProvider = new SANModelItemProvider(this);
		}

		return sanModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.polarsys.chess.mobius.model.SAN.SharedState} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SharedStateItemProvider sharedStateItemProvider;

	/**
	 * This creates an adapter for a {@link org.polarsys.chess.mobius.model.SAN.SharedState}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSharedStateAdapter() {
		if (sharedStateItemProvider == null) {
			sharedStateItemProvider = new SharedStateItemProvider(this);
		}

		return sharedStateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.polarsys.chess.mobius.model.SAN.Join} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JoinItemProvider joinItemProvider;

	/**
	 * This creates an adapter for a {@link org.polarsys.chess.mobius.model.SAN.Join}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJoinAdapter() {
		if (joinItemProvider == null) {
			joinItemProvider = new JoinItemProvider(this);
		}

		return joinItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.polarsys.chess.mobius.model.SAN.Rep} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RepItemProvider repItemProvider;

	/**
	 * This creates an adapter for a {@link org.polarsys.chess.mobius.model.SAN.Rep}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRepAdapter() {
		if (repItemProvider == null) {
			repItemProvider = new RepItemProvider(this);
		}

		return repItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.polarsys.chess.mobius.model.SAN.AtomicNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AtomicNodeItemProvider atomicNodeItemProvider;

	/**
	 * This creates an adapter for a {@link org.polarsys.chess.mobius.model.SAN.AtomicNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAtomicNodeAdapter() {
		if (atomicNodeItemProvider == null) {
			atomicNodeItemProvider = new AtomicNodeItemProvider(this);
		}

		return atomicNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.polarsys.chess.mobius.model.SAN.Place} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PlaceItemProvider placeItemProvider;

	/**
	 * This creates an adapter for a {@link org.polarsys.chess.mobius.model.SAN.Place}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPlaceAdapter() {
		if (placeItemProvider == null) {
			placeItemProvider = new PlaceItemProvider(this);
		}

		return placeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.polarsys.chess.mobius.model.SAN.TimedActivity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TimedActivityItemProvider timedActivityItemProvider;

	/**
	 * This creates an adapter for a {@link org.polarsys.chess.mobius.model.SAN.TimedActivity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTimedActivityAdapter() {
		if (timedActivityItemProvider == null) {
			timedActivityItemProvider = new TimedActivityItemProvider(this);
		}

		return timedActivityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.polarsys.chess.mobius.model.SAN.InstantaneousActivity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InstantaneousActivityItemProvider instantaneousActivityItemProvider;

	/**
	 * This creates an adapter for a {@link org.polarsys.chess.mobius.model.SAN.InstantaneousActivity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInstantaneousActivityAdapter() {
		if (instantaneousActivityItemProvider == null) {
			instantaneousActivityItemProvider = new InstantaneousActivityItemProvider(this);
		}

		return instantaneousActivityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.polarsys.chess.mobius.model.SAN.InputGate} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InputGateItemProvider inputGateItemProvider;

	/**
	 * This creates an adapter for a {@link org.polarsys.chess.mobius.model.SAN.InputGate}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInputGateAdapter() {
		if (inputGateItemProvider == null) {
			inputGateItemProvider = new InputGateItemProvider(this);
		}

		return inputGateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.polarsys.chess.mobius.model.SAN.OutputGate} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OutputGateItemProvider outputGateItemProvider;

	/**
	 * This creates an adapter for a {@link org.polarsys.chess.mobius.model.SAN.OutputGate}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOutputGateAdapter() {
		if (outputGateItemProvider == null) {
			outputGateItemProvider = new OutputGateItemProvider(this);
		}

		return outputGateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.polarsys.chess.mobius.model.SAN.GlobalVariable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GlobalVariableItemProvider globalVariableItemProvider;

	/**
	 * This creates an adapter for a {@link org.polarsys.chess.mobius.model.SAN.GlobalVariable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGlobalVariableAdapter() {
		if (globalVariableItemProvider == null) {
			globalVariableItemProvider = new GlobalVariableItemProvider(this);
		}

		return globalVariableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.polarsys.chess.mobius.model.SAN.ActivityPlaceCase} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActivityPlaceCaseItemProvider activityPlaceCaseItemProvider;

	/**
	 * This creates an adapter for a {@link org.polarsys.chess.mobius.model.SAN.ActivityPlaceCase}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActivityPlaceCaseAdapter() {
		if (activityPlaceCaseItemProvider == null) {
			activityPlaceCaseItemProvider = new ActivityPlaceCaseItemProvider(this);
		}

		return activityPlaceCaseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.polarsys.chess.mobius.model.SAN.GraphicalElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GraphicalElementItemProvider graphicalElementItemProvider;

	/**
	 * This creates an adapter for a {@link org.polarsys.chess.mobius.model.SAN.GraphicalElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGraphicalElementAdapter() {
		if (graphicalElementItemProvider == null) {
			graphicalElementItemProvider = new GraphicalElementItemProvider(this);
		}

		return graphicalElementItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (sanModelItemProvider != null) sanModelItemProvider.dispose();
		if (sharedStateItemProvider != null) sharedStateItemProvider.dispose();
		if (joinItemProvider != null) joinItemProvider.dispose();
		if (repItemProvider != null) repItemProvider.dispose();
		if (atomicNodeItemProvider != null) atomicNodeItemProvider.dispose();
		if (placeItemProvider != null) placeItemProvider.dispose();
		if (timedActivityItemProvider != null) timedActivityItemProvider.dispose();
		if (instantaneousActivityItemProvider != null) instantaneousActivityItemProvider.dispose();
		if (inputGateItemProvider != null) inputGateItemProvider.dispose();
		if (outputGateItemProvider != null) outputGateItemProvider.dispose();
		if (globalVariableItemProvider != null) globalVariableItemProvider.dispose();
		if (activityPlaceCaseItemProvider != null) activityPlaceCaseItemProvider.dispose();
		if (graphicalElementItemProvider != null) graphicalElementItemProvider.dispose();
	}

}

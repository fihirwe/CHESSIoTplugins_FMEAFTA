[comment encoding = UTF-8 /]
[module ThingUtilities('http://www.eclipse.org/uml2/5.0.0/UML')]

[import org::polarsys::chess::iot::generator::services::usesUML2Services /]

[template public getProperties(component : Component, aPackage : Package)]
[for(property : Property | getComponentsProperties(component, aPackage))]
	property  [property.name/] : [if(property.type.name.startsWith('E'))][property.type.name.substring(2)/][else][property.type.name/][/if]
[/for]
[/template]

[template public generatePropertiesAndPorts(component : Component){
CSPort : String = 'MARTE::MARTE_DesignModel::GCM::ClientServerPort';
IoTPort : String = 'CHESSIoT::CHESSIoTSoftware::IoTPort';
PayloadStr : String = 'CHESSIoT::CHESSIoTSoftware::Payload';}]
	[let props : OrderedSet(Property) = component.ownedAttribute->filter(Property)]
	[for (prop : Property | props)]
	[if (prop.oclIsTypeOf(Port))]
	[let port : Port = prop.oclAsType(Port)]
	[if (port.getAppliedStereotype(IoTPort)->notEmpty())]
	[if(port.getValue(port.getAppliedStereotype(IoTPort), 'connectionPins').toString().size()>0)]
	[for(it : OclAny | port.getValue(port.getAppliedStereotype(IoTPort), 'connectionPins'))]
	property PIN[it.toString()/]: UInt8 = [it.toString()/]
	[/for]
	[/if]
	[/if]
	[if (port.getAppliedStereotype(CSPort)->notEmpty())]
	[let proreq : OclAny = port.getValue(port.getAppliedStereotype(CSPort), 'kind')] 
	[proreq.toString()/] port [port.name/]{
	[let inte1 : Integer = 0.oclAsType(Integer)]
	[let receives : OclAny = port.getValue(port.getAppliedStereotype(IoTPort), 'receive_payload')]
	[if(port.getValue(port.getAppliedStereotype(IoTPort), 'receive_payload').toString().size()>0)]
	receives [if (port.getAppliedStereotype(IoTPort)->notEmpty())][for(it : OclAny | receives)][if(i>1)],[/if][it.eGet('base_Class').oclAsType(Class).name/][/for][/if]
	[/if]
	[/let]
	[let sends : OclAny = port.getValue(port.getAppliedStereotype(IoTPort), 'send_payload')]
	[if(port.getValue(port.getAppliedStereotype(IoTPort), 'send_payload').toString().size()>0)]
	sends [if (port.getAppliedStereotype(IoTPort)->notEmpty())][for(it : OclAny | sends)][if(i>1)],[/if][it.eGet('base_Class').oclAsType(Class).name/][/for][/if]
	[/if]
	[/let][/let]
	}
	[/let]
	[/if]
	[/let]
	[/if]
	[/for]
	[/let]
[/template]

[template public includeParts(VE:Component)]
[for (part : Property | VE.getAllAttributes())],[part.type.name+'Messages'/][/for]
[/template]

[comment]This template deals with importing and calling the generate sub components[/comment]
[template public generateImport(component : Component, aPackage : Package, VE:Component)]
[for (part : Property | VE.getAllAttributes())]
	[for (sub_component : Component | aPackage.allOwnedElements()->filter(Component))]
		[if (part.type.name.toLowerCase()=sub_component.name.toLowerCase() and not (part.type.name.toLowerCase()=component.name.toLowerCase()))]
import "[VE.name.concat('_subs/').concat(sub_component.name).concat('.thingml')/]"
		[/if]
	[/for]
[/for]
[/template]

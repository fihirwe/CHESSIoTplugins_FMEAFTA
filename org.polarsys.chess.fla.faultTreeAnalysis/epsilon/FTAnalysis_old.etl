/*******************************************************************************
 * Copyright (c) 2021, Intecs Solutions Spa 
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v2.0
 * which accompanies this distribution, and is available at
 * https://www.eclipse.org/org/documents/epl-2.0/EPL-2.0.html
 *
 * SPDX-License-Identifier: EPL-2.0
 *  
 *   Contributors:
 *   Felicien Ihirwe
 *   Initial API and implementation and/or initial documentation
 *******************************************************************************/
/**
 */


pre{
	"Running transformation-------------------------".println();
	var mapping : Sequence ;
	var ftas : Sequence ;
	var parents : Sequence;
	var events : Sequence;
	var count : Integer;
	count=0;
	mapping = emftanew!FTAModel.allInstances();

	for(ft in mapping){
		var fta = new emfta!FTAModel;
		fta.name = ft.name;
		ftas.add(fta);
	}
}


rule topEvent2FTA
transform ftSource : emftanew!FTAModel
to evTarget : emfta!Event{
	var firstelement : Boolean = true;
for(ftTarget in ftas){

	if(firstelement = true){
		for(evSource in ftSource.events ){

			if(ftTarget.name = evSource.name){
				var nevEv= new emfta!Event;
				nevEv.name=evSource.name;
				nevEv= AssignNewType(evSource,nevEv);
				nevEv.gate=getGate(evSource.description);
				nevEv.probability=evSource.probability;
				nevEv.name.println();
				ftTarget.events.add(nevEv);
				firstelement=false;

				if(getEventCount(evSource.gate)>1){
					for(event in evSource.gate.events){

						if(event.type.name="Basic"){
							var localEv= new emfta!Event;
							localEv.name=event.name;
							localEv.type= emfta!EventType#Basic;
							localEv.description=event.description;
							localEv.probability=event.probability;
							nevEv.gate.events.add(localEv);
							ftTarget.events.add(localEv);
							parents.add(nevEv);
						}
						else if(event.type.name="External"){
							var localEv= new emfta!Event;
							localEv.name=event.name;
							localEv.type= emfta!EventType#External;
							localEv.description=event.description;
							localEv.probability=event.probability;
							nevEv.gate.events.add(localEv);
							ftTarget.events.add(localEv);
							parents.add(nevEv);
						}
						else if(event.type.name="Intermediate"){

							if(getEventCount(event.gate)>1){
								var localEv= new emfta!Event;
								localEv.name=event.name;
								localEv= AssignNewType(event,localEv);
								localEv.gate=getGate(event.description);
								localEv.description=event.description;
								localEv.probability=event.probability;
								nevEv.gate.events.add(localEv);
								ftTarget.events.add(localEv);
								generateFollowings(event,localEv,ftTarget);
							}
							else if(getEventCount(event.gate)=1){
								generateFollowings(event,nevEv,ftTarget);
							}
						}
					}
				}
				else if(getEventCount(evSource.gate)=1){
					//				for(event in evSource.gate.events){
					//					var nEv= new emfta!Event;
					//					nEv.name=event.name;
					//					nEv= AssignNewType(event,nEv);
					//					nEv.gate=getGate(event.description);
					//					nevEv.gate.events.add(nEv);
					//					
					//					generateFollowings(nEv,ftTarget);
					//				}
					//				generateFollowings(nevEv,ftTarget);
					"To beee implementedddddddddddddddddddddddd====".println();
				}
			}
		}
	}

}
}


operation generateFollowings(lookEv: emftanew!Event, grobalEv : emfta!Event, ft : emfta!FTAModel) : Sequence{

	if(getEventCount(lookEv.gate)>1){
		for(event in lookEv.gate.events){

			if(event.type.name="Basic"){
				var localEvInt= new emfta!Event;
				localEvInt.name=event.name;
				localEvInt.type= emfta!EventType#Basic;
				localEvInt.description=event.description;
				localEvInt.probability=event.probability;
				grobalEv.gate.events.add(localEvInt);
				ft.events.add(localEvInt);
				parents.add(grobalEv);
			}
			else if(event.type.name="External"){
				var localEvInt= new emfta!Event;
				localEvInt.name=event.name;
				localEvInt.type= emfta!EventType#External;
				localEvInt.description=event.description;
				localEvInt.probability=event.probability;
				grobalEv.gate.events.add(localEvInt);
				ft.events.add(localEvInt);
				parents.add(grobalEv);
			}
			else 
			{
				if(getEventCount(event.gate)>1){
					var localEv= new emfta!Event;
					localEv.name=event.name;
					localEv= AssignNewType(event,localEv);
					localEv.gate=getGate(event.description);
					localEv.description=event.description;
					localEv.probability=event.probability;
					grobalEv.gate.events.add(localEv);
					ft.events.add(localEv);
					generateFollowings(event,localEv,ft);

				}

				else if(getEventCount(event.gate)=1){
					generateFollowings(event,grobalEv,ft);
				}
			}
		}
	}
	else if(getEventCount(lookEv.gate)=1){

		var event;
		for(event1 in lookEv.gate.events){
			event=event1;
		}

		if(event.type.name="Basic"){
			var localEvInt= new emfta!Event;
			localEvInt.name=event.name;
			localEvInt.type= emfta!EventType#Basic;
			localEvInt.description=event.description;
			localEvInt.probability=event.probability;
			grobalEv.gate.events.add(localEvInt);
			ft.events.add(localEvInt);
			parents.add(grobalEv);
		}
		else if(event.type.name="External"){
			var localEvInt= new emfta!Event;
			localEvInt.name=event.name;
			localEvInt.type= emfta!EventType#External;
			localEvInt.description=event.description;
			localEvInt.probability=event.probability;
			grobalEv.gate.events.add(localEvInt);
			ft.events.add(localEvInt);
			parents.add(grobalEv);
		}
		else
		{

			if(getEventCount(event.gate)>1){
				var localEv= new emfta!Event;
				localEv.name=event.name;
				localEv= AssignNewType(event,localEv);
				localEv.gate=getGate(event.description);
				localEv.description=event.description;
				localEv.probability=event.probability;
				grobalEv.gate.events.add(localEv);
				ft.events.add(localEv);
				generateFollowings(event,localEv,ft);

			}

			else if (getEventCount(event.gate)=1){
				generateFollowings(event,grobalEv,ft);
			}
		}
	}
	//	return parents;
}





operation getGate(st : String): emfta!Gate{
	var g=new emfta!Gate;
	for (gate in emftanew!Gate.allInstances()){
		if(gate.description = st){
			if(gate.type.name="OR"){
				g.type=emfta!GateType#OR;
			}
			else{
				g.type=emfta!GateType#AND;
			}

			g.description=gate.description;
			for(oldEv in gate.events){
				var evTemp=new emfta!Event;
				evTemp.name=oldEv.name;
				evTemp=AssignNewType(oldEv,evTemp);
				evTemp.description=oldEv.description;
				g.events.add(evTemp);
			}
			g.nbOccurrences=gate.nbOccurrences;
			return g;
		}
	}
}

operation AssignNewType(oldEv: emftanew!Event,evTemp: emfta!Event):emfta!Event{
	if(oldEv.type.name="External"){
		evTemp.type=emfta!EventType#External;
	}
	else if(oldEv.type.name="Basic") {
		evTemp.type=emfta!EventType#Basic;
	}
	else {
		evTemp.type=emfta!EventType#Intermediate;
	}
	return evTemp;
}


operation getEventCount(gate :emftanew!Gate): Integer{
	return gate.events.size();
}
operation getEventCountTarget(gate :emfta!Gate): Integer{
	return gate.events.size();
}


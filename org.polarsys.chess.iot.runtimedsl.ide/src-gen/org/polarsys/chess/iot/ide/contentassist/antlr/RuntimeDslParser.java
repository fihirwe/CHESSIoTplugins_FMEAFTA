/*
 * generated by Xtext 2.12.0
 */
package org.polarsys.chess.iot.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.polarsys.chess.iot.ide.contentassist.antlr.internal.InternalRuntimeDslParser;
import org.polarsys.chess.iot.services.RuntimeDslGrammarAccess;

public class RuntimeDslParser extends AbstractContentAssistParser {

	@Inject
	private RuntimeDslGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalRuntimeDslParser createParser() {
		InternalRuntimeDslParser result = new InternalRuntimeDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getRuleAccess().getAlternatives(), "rule__Rule__Alternatives");
					put(grammarAccess.getLogTypeAccess().getAlternatives(), "rule__LogType__Alternatives");
					put(grammarAccess.getBOOLEANAccess().getAlternatives(), "rule__BOOLEAN__Alternatives");
					put(grammarAccess.getExpressionAccess().getGroup(), "rule__Expression__Group__0");
					put(grammarAccess.getExpressionAccess().getGroup_3(), "rule__Expression__Group_3__0");
					put(grammarAccess.getExpressionAccess().getGroup_4(), "rule__Expression__Group_4__0");
					put(grammarAccess.getAbstractAgentAccess().getGroup(), "rule__AbstractAgent__Group__0");
					put(grammarAccess.getAbstractAgentAccess().getGroup_2(), "rule__AbstractAgent__Group_2__0");
					put(grammarAccess.getAbstractAgentAccess().getGroup_4(), "rule__AbstractAgent__Group_4__0");
					put(grammarAccess.getCreateAccess().getGroup(), "rule__Create__Group__0");
					put(grammarAccess.getStartAccess().getGroup(), "rule__Start__Group__0");
					put(grammarAccess.getStopAccess().getGroup(), "rule__Stop__Group__0");
					put(grammarAccess.getRestartAccess().getGroup(), "rule__Restart__Group__0");
					put(grammarAccess.getRedeployAccess().getGroup(), "rule__Redeploy__Group__0");
					put(grammarAccess.getLogAccess().getGroup(), "rule__Log__Group__0");
					put(grammarAccess.getRerunAgentAccess().getGroup(), "rule__RerunAgent__Group__0");
					put(grammarAccess.getDeploymentAccess().getPlanAssignment(), "rule__Deployment__PlanAssignment");
					put(grammarAccess.getExpressionAccess().getNameAssignment_1(), "rule__Expression__NameAssignment_1");
					put(grammarAccess.getExpressionAccess().getSetupAssignment_3_1(), "rule__Expression__SetupAssignment_3_1");
					put(grammarAccess.getExpressionAccess().getPlanAssignment_4_1(), "rule__Expression__PlanAssignment_4_1");
					put(grammarAccess.getExpressionAccess().getDescriptionAssignment_6(), "rule__Expression__DescriptionAssignment_6");
					put(grammarAccess.getExpressionAccess().getAgentAssignment_7(), "rule__Expression__AgentAssignment_7");
					put(grammarAccess.getAbstractAgentAccess().getNameAssignment_1(), "rule__AbstractAgent__NameAssignment_1");
					put(grammarAccess.getAbstractAgentAccess().getSuperTypeAssignment_2_1(), "rule__AbstractAgent__SuperTypeAssignment_2_1");
					put(grammarAccess.getAbstractAgentAccess().getRuleAssignment_4_1(), "rule__AbstractAgent__RuleAssignment_4_1");
					put(grammarAccess.getCreateAccess().getService_nameAssignment_2(), "rule__Create__Service_nameAssignment_2");
					put(grammarAccess.getCreateAccess().getMachine_nameAssignment_4(), "rule__Create__Machine_nameAssignment_4");
					put(grammarAccess.getStartAccess().getService_nameAssignment_2(), "rule__Start__Service_nameAssignment_2");
					put(grammarAccess.getStartAccess().getMachine_nameAssignment_4(), "rule__Start__Machine_nameAssignment_4");
					put(grammarAccess.getStopAccess().getService_nameAssignment_2(), "rule__Stop__Service_nameAssignment_2");
					put(grammarAccess.getStopAccess().getMachine_nameAssignment_4(), "rule__Stop__Machine_nameAssignment_4");
					put(grammarAccess.getRestartAccess().getService_nameAssignment_2(), "rule__Restart__Service_nameAssignment_2");
					put(grammarAccess.getRestartAccess().getMachine_nameAssignment_4(), "rule__Restart__Machine_nameAssignment_4");
					put(grammarAccess.getRedeployAccess().getService_nameAssignment_2(), "rule__Redeploy__Service_nameAssignment_2");
					put(grammarAccess.getRedeployAccess().getMachine_addressAssignment_4(), "rule__Redeploy__Machine_addressAssignment_4");
					put(grammarAccess.getLogAccess().getService_nameAssignment_2(), "rule__Log__Service_nameAssignment_2");
					put(grammarAccess.getLogAccess().getLog_typeAssignment_4(), "rule__Log__Log_typeAssignment_4");
					put(grammarAccess.getLogAccess().getFilenameAssignment_6(), "rule__Log__FilenameAssignment_6");
					put(grammarAccess.getLogAccess().getLocationAssignment_8(), "rule__Log__LocationAssignment_8");
					put(grammarAccess.getLogAccess().getMachine_nameAssignment_10(), "rule__Log__Machine_nameAssignment_10");
					put(grammarAccess.getRerunAgentAccess().getAgentAssignment_2(), "rule__RerunAgent__AgentAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public RuntimeDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(RuntimeDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}

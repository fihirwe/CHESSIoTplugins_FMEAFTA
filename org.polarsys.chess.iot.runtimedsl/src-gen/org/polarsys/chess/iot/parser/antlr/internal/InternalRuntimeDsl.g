/*
 * generated by Xtext 2.12.0
 */
grammar InternalRuntimeDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.polarsys.chess.iot.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.polarsys.chess.iot.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.polarsys.chess.iot.services.RuntimeDslGrammarAccess;

}

@parser::members {

 	private RuntimeDslGrammarAccess grammarAccess;

    public InternalRuntimeDslParser(TokenStream input, RuntimeDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Deployment";
   	}

   	@Override
   	protected RuntimeDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleDeployment
entryRuleDeployment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDeploymentRule()); }
	iv_ruleDeployment=ruleDeployment
	{ $current=$iv_ruleDeployment.current; }
	EOF;

// Rule Deployment
ruleDeployment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getDeploymentAccess().getPlanExpressionParserRuleCall_0());
			}
			lv_plan_0_0=ruleExpression
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getDeploymentRule());
				}
				add(
					$current,
					"plan",
					lv_plan_0_0,
					"org.polarsys.chess.iot.RuntimeDsl.Expression");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='DepPlan:'
		{
			newLeafNode(otherlv_0, grammarAccess.getExpressionAccess().getDepPlanKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getExpressionAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExpressionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getExpressionAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			otherlv_3='setup:'
			{
				newLeafNode(otherlv_3, grammarAccess.getExpressionAccess().getSetupKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getExpressionAccess().getSetupBOOLEANEnumRuleCall_3_1_0());
					}
					lv_setup_4_0=ruleBOOLEAN
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpressionRule());
						}
						set(
							$current,
							"setup",
							lv_setup_4_0,
							"org.polarsys.chess.iot.RuntimeDsl.BOOLEAN");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_5='re-use-plan:'
			{
				newLeafNode(otherlv_5, grammarAccess.getExpressionAccess().getReUsePlanKeyword_4_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getExpressionRule());
						}
					}
					otherlv_6=RULE_ID
					{
						newLeafNode(otherlv_6, grammarAccess.getExpressionAccess().getPlanExpressionCrossReference_4_1_0());
					}
				)
			)
		)?
		otherlv_7='Description:'
		{
			newLeafNode(otherlv_7, grammarAccess.getExpressionAccess().getDescriptionKeyword_5());
		}
		(
			(
				lv_description_8_0=RULE_STRING
				{
					newLeafNode(lv_description_8_0, grammarAccess.getExpressionAccess().getDescriptionSTRINGTerminalRuleCall_6_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExpressionRule());
					}
					setWithLastConsumed(
						$current,
						"description",
						lv_description_8_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionAccess().getAgentAbstractAgentParserRuleCall_7_0());
				}
				lv_agent_9_0=ruleAbstractAgent
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionRule());
					}
					add(
						$current,
						"agent",
						lv_agent_9_0,
						"org.polarsys.chess.iot.RuntimeDsl.AbstractAgent");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_10='}'
		{
			newLeafNode(otherlv_10, grammarAccess.getExpressionAccess().getRightCurlyBracketKeyword_8());
		}
	)
;

// Entry rule entryRuleAbstractAgent
entryRuleAbstractAgent returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAbstractAgentRule()); }
	iv_ruleAbstractAgent=ruleAbstractAgent
	{ $current=$iv_ruleAbstractAgent.current; }
	EOF;

// Rule AbstractAgent
ruleAbstractAgent returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='agent:'
		{
			newLeafNode(otherlv_0, grammarAccess.getAbstractAgentAccess().getAgentKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getAbstractAgentAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAbstractAgentRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_2='extends'
			{
				newLeafNode(otherlv_2, grammarAccess.getAbstractAgentAccess().getExtendsKeyword_2_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAbstractAgentRule());
						}
					}
					otherlv_3=RULE_ID
					{
						newLeafNode(otherlv_3, grammarAccess.getAbstractAgentAccess().getSuperTypeAbstractAgentCrossReference_2_1_0());
					}
				)
			)
		)?
		otherlv_4='{'
		{
			newLeafNode(otherlv_4, grammarAccess.getAbstractAgentAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			otherlv_5='RULE:'
			{
				newLeafNode(otherlv_5, grammarAccess.getAbstractAgentAccess().getRULEKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAbstractAgentAccess().getRuleRuleParserRuleCall_4_1_0());
					}
					lv_rule_6_0=rulerule
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAbstractAgentRule());
						}
						add(
							$current,
							"rule",
							lv_rule_6_0,
							"org.polarsys.chess.iot.RuntimeDsl.rule");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getAbstractAgentAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRulerule
entryRulerule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRuleRule()); }
	iv_rulerule=rulerule
	{ $current=$iv_rulerule.current; }
	EOF;

// Rule rule
rulerule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getRuleAccess().getCreateParserRuleCall_0());
		}
		this_create_0=rulecreate
		{
			$current = $this_create_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getRuleAccess().getStartParserRuleCall_1());
		}
		this_start_1=rulestart
		{
			$current = $this_start_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getRuleAccess().getStopParserRuleCall_2());
		}
		this_stop_2=rulestop
		{
			$current = $this_stop_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getRuleAccess().getRestartParserRuleCall_3());
		}
		this_restart_3=rulerestart
		{
			$current = $this_restart_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getRuleAccess().getRedeployParserRuleCall_4());
		}
		this_redeploy_4=ruleredeploy
		{
			$current = $this_redeploy_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getRuleAccess().getLogParserRuleCall_5());
		}
		this_log_5=rulelog
		{
			$current = $this_log_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getRuleAccess().getRerunAgentParserRuleCall_6());
		}
		this_rerunAgent_6=rulererunAgent
		{
			$current = $this_rerunAgent_6.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulecreate
entryRulecreate returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCreateRule()); }
	iv_rulecreate=rulecreate
	{ $current=$iv_rulecreate.current; }
	EOF;

// Rule create
rulecreate returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='create'
		{
			newLeafNode(otherlv_0, grammarAccess.getCreateAccess().getCreateKeyword_0());
		}
		otherlv_1='=>'
		{
			newLeafNode(otherlv_1, grammarAccess.getCreateAccess().getEqualsSignGreaterThanSignKeyword_1());
		}
		(
			(
				lv_service_name_2_0=RULE_STRING
				{
					newLeafNode(lv_service_name_2_0, grammarAccess.getCreateAccess().getService_nameSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCreateRule());
					}
					setWithLastConsumed(
						$current,
						"service_name",
						lv_service_name_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_3='on:'
		{
			newLeafNode(otherlv_3, grammarAccess.getCreateAccess().getOnKeyword_3());
		}
		(
			(
				lv_machine_name_4_0=RULE_STRING
				{
					newLeafNode(lv_machine_name_4_0, grammarAccess.getCreateAccess().getMachine_nameSTRINGTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCreateRule());
					}
					setWithLastConsumed(
						$current,
						"machine_name",
						lv_machine_name_4_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRulestart
entryRulestart returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStartRule()); }
	iv_rulestart=rulestart
	{ $current=$iv_rulestart.current; }
	EOF;

// Rule start
rulestart returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='start'
		{
			newLeafNode(otherlv_0, grammarAccess.getStartAccess().getStartKeyword_0());
		}
		otherlv_1='=>'
		{
			newLeafNode(otherlv_1, grammarAccess.getStartAccess().getEqualsSignGreaterThanSignKeyword_1());
		}
		(
			(
				lv_service_name_2_0=RULE_STRING
				{
					newLeafNode(lv_service_name_2_0, grammarAccess.getStartAccess().getService_nameSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStartRule());
					}
					setWithLastConsumed(
						$current,
						"service_name",
						lv_service_name_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_3='on:'
		{
			newLeafNode(otherlv_3, grammarAccess.getStartAccess().getOnKeyword_3());
		}
		(
			(
				lv_machine_name_4_0=RULE_STRING
				{
					newLeafNode(lv_machine_name_4_0, grammarAccess.getStartAccess().getMachine_nameSTRINGTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStartRule());
					}
					setWithLastConsumed(
						$current,
						"machine_name",
						lv_machine_name_4_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRulestop
entryRulestop returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStopRule()); }
	iv_rulestop=rulestop
	{ $current=$iv_rulestop.current; }
	EOF;

// Rule stop
rulestop returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='stop'
		{
			newLeafNode(otherlv_0, grammarAccess.getStopAccess().getStopKeyword_0());
		}
		otherlv_1='=>'
		{
			newLeafNode(otherlv_1, grammarAccess.getStopAccess().getEqualsSignGreaterThanSignKeyword_1());
		}
		(
			(
				lv_service_name_2_0=RULE_STRING
				{
					newLeafNode(lv_service_name_2_0, grammarAccess.getStopAccess().getService_nameSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStopRule());
					}
					setWithLastConsumed(
						$current,
						"service_name",
						lv_service_name_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_3='on:'
		{
			newLeafNode(otherlv_3, grammarAccess.getStopAccess().getOnKeyword_3());
		}
		(
			(
				lv_machine_name_4_0=RULE_STRING
				{
					newLeafNode(lv_machine_name_4_0, grammarAccess.getStopAccess().getMachine_nameSTRINGTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStopRule());
					}
					setWithLastConsumed(
						$current,
						"machine_name",
						lv_machine_name_4_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRulerestart
entryRulerestart returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRestartRule()); }
	iv_rulerestart=rulerestart
	{ $current=$iv_rulerestart.current; }
	EOF;

// Rule restart
rulerestart returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='re-start'
		{
			newLeafNode(otherlv_0, grammarAccess.getRestartAccess().getReStartKeyword_0());
		}
		otherlv_1='=>'
		{
			newLeafNode(otherlv_1, grammarAccess.getRestartAccess().getEqualsSignGreaterThanSignKeyword_1());
		}
		(
			(
				lv_service_name_2_0=RULE_STRING
				{
					newLeafNode(lv_service_name_2_0, grammarAccess.getRestartAccess().getService_nameSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRestartRule());
					}
					setWithLastConsumed(
						$current,
						"service_name",
						lv_service_name_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_3='on:'
		{
			newLeafNode(otherlv_3, grammarAccess.getRestartAccess().getOnKeyword_3());
		}
		(
			(
				lv_machine_name_4_0=RULE_STRING
				{
					newLeafNode(lv_machine_name_4_0, grammarAccess.getRestartAccess().getMachine_nameSTRINGTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRestartRule());
					}
					setWithLastConsumed(
						$current,
						"machine_name",
						lv_machine_name_4_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleredeploy
entryRuleredeploy returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRedeployRule()); }
	iv_ruleredeploy=ruleredeploy
	{ $current=$iv_ruleredeploy.current; }
	EOF;

// Rule redeploy
ruleredeploy returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='re-deploy'
		{
			newLeafNode(otherlv_0, grammarAccess.getRedeployAccess().getReDeployKeyword_0());
		}
		otherlv_1='=>'
		{
			newLeafNode(otherlv_1, grammarAccess.getRedeployAccess().getEqualsSignGreaterThanSignKeyword_1());
		}
		(
			(
				lv_service_name_2_0=RULE_STRING
				{
					newLeafNode(lv_service_name_2_0, grammarAccess.getRedeployAccess().getService_nameSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRedeployRule());
					}
					setWithLastConsumed(
						$current,
						"service_name",
						lv_service_name_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_3='on:'
		{
			newLeafNode(otherlv_3, grammarAccess.getRedeployAccess().getOnKeyword_3());
		}
		(
			(
				lv_machine_address_4_0=RULE_STRING
				{
					newLeafNode(lv_machine_address_4_0, grammarAccess.getRedeployAccess().getMachine_addressSTRINGTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRedeployRule());
					}
					setWithLastConsumed(
						$current,
						"machine_address",
						lv_machine_address_4_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRulelog
entryRulelog returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLogRule()); }
	iv_rulelog=rulelog
	{ $current=$iv_rulelog.current; }
	EOF;

// Rule log
rulelog returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='log'
		{
			newLeafNode(otherlv_0, grammarAccess.getLogAccess().getLogKeyword_0());
		}
		otherlv_1='=>'
		{
			newLeafNode(otherlv_1, grammarAccess.getLogAccess().getEqualsSignGreaterThanSignKeyword_1());
		}
		(
			(
				lv_service_name_2_0=RULE_STRING
				{
					newLeafNode(lv_service_name_2_0, grammarAccess.getLogAccess().getService_nameSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLogRule());
					}
					setWithLastConsumed(
						$current,
						"service_name",
						lv_service_name_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_3='log_type:'
		{
			newLeafNode(otherlv_3, grammarAccess.getLogAccess().getLog_typeKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLogAccess().getLog_typeLogTypeEnumRuleCall_4_0());
				}
				lv_log_type_4_0=ruleLogType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLogRule());
					}
					set(
						$current,
						"log_type",
						lv_log_type_4_0,
						"org.polarsys.chess.iot.RuntimeDsl.LogType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5='filename:'
		{
			newLeafNode(otherlv_5, grammarAccess.getLogAccess().getFilenameKeyword_5());
		}
		(
			(
				lv_filename_6_0=RULE_STRING
				{
					newLeafNode(lv_filename_6_0, grammarAccess.getLogAccess().getFilenameSTRINGTerminalRuleCall_6_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLogRule());
					}
					setWithLastConsumed(
						$current,
						"filename",
						lv_filename_6_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_7='location:'
		{
			newLeafNode(otherlv_7, grammarAccess.getLogAccess().getLocationKeyword_7());
		}
		(
			(
				lv_location_8_0=RULE_STRING
				{
					newLeafNode(lv_location_8_0, grammarAccess.getLogAccess().getLocationSTRINGTerminalRuleCall_8_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLogRule());
					}
					setWithLastConsumed(
						$current,
						"location",
						lv_location_8_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_9='on:'
		{
			newLeafNode(otherlv_9, grammarAccess.getLogAccess().getOnKeyword_9());
		}
		(
			(
				lv_machine_name_10_0=RULE_STRING
				{
					newLeafNode(lv_machine_name_10_0, grammarAccess.getLogAccess().getMachine_nameSTRINGTerminalRuleCall_10_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLogRule());
					}
					setWithLastConsumed(
						$current,
						"machine_name",
						lv_machine_name_10_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRulererunAgent
entryRulererunAgent returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRerunAgentRule()); }
	iv_rulererunAgent=rulererunAgent
	{ $current=$iv_rulererunAgent.current; }
	EOF;

// Rule rerunAgent
rulererunAgent returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='rerun-agent'
		{
			newLeafNode(otherlv_0, grammarAccess.getRerunAgentAccess().getRerunAgentKeyword_0());
		}
		otherlv_1='=>'
		{
			newLeafNode(otherlv_1, grammarAccess.getRerunAgentAccess().getEqualsSignGreaterThanSignKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRerunAgentRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getRerunAgentAccess().getAgentAbstractAgentCrossReference_2_0());
				}
			)
		)
	)
;

// Rule LogType
ruleLogType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='machine'
			{
				$current = grammarAccess.getLogTypeAccess().getMACHINEEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getLogTypeAccess().getMACHINEEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='service'
			{
				$current = grammarAccess.getLogTypeAccess().getSERVICEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getLogTypeAccess().getSERVICEEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule BOOLEAN
ruleBOOLEAN returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='true'
			{
				$current = grammarAccess.getBOOLEANAccess().getTRUEEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getBOOLEANAccess().getTRUEEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='false'
			{
				$current = grammarAccess.getBOOLEANAccess().getFALSEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getBOOLEANAccess().getFALSEEnumLiteralDeclaration_1());
			}
		)
	)
;

RULE_NUMBER : ('0'..'9')* ('.' ('0'..'9')+)?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;

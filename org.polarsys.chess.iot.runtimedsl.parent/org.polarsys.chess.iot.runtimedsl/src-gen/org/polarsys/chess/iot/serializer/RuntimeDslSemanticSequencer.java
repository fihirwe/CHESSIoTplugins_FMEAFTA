/*
 * generated by Xtext 2.12.0
 */
package org.polarsys.chess.iot.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.polarsys.chess.iot.runtimeDsl.Model;
import org.polarsys.chess.iot.runtimeDsl.Module;
import org.polarsys.chess.iot.runtimeDsl.RuntimeDslPackage;
import org.polarsys.chess.iot.runtimeDsl.Uses;
import org.polarsys.chess.iot.runtimeDsl.log;
import org.polarsys.chess.iot.runtimeDsl.monitor;
import org.polarsys.chess.iot.runtimeDsl.redeploy;
import org.polarsys.chess.iot.runtimeDsl.restart;
import org.polarsys.chess.iot.runtimeDsl.run;
import org.polarsys.chess.iot.runtimeDsl.start;
import org.polarsys.chess.iot.runtimeDsl.stop;
import org.polarsys.chess.iot.services.RuntimeDslGrammarAccess;

@SuppressWarnings("all")
public class RuntimeDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private RuntimeDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == RuntimeDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case RuntimeDslPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case RuntimeDslPackage.MODULE:
				sequence_Module(context, (Module) semanticObject); 
				return; 
			case RuntimeDslPackage.USES:
				sequence_Uses(context, (Uses) semanticObject); 
				return; 
			case RuntimeDslPackage.LOG:
				sequence_log(context, (log) semanticObject); 
				return; 
			case RuntimeDslPackage.MONITOR:
				sequence_monitor(context, (monitor) semanticObject); 
				return; 
			case RuntimeDslPackage.REDEPLOY:
				sequence_redeploy(context, (redeploy) semanticObject); 
				return; 
			case RuntimeDslPackage.RESTART:
				sequence_restart(context, (restart) semanticObject); 
				return; 
			case RuntimeDslPackage.RUN:
				sequence_run(context, (run) semanticObject); 
				return; 
			case RuntimeDslPackage.START:
				sequence_start(context, (start) semanticObject); 
				return; 
			case RuntimeDslPackage.STOP:
				sequence_stop(context, (stop) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     (name=ID module+=Module*)
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Module returns Module
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         uses+=Uses* 
	 *         (
	 *             action+=start | 
	 *             action+=stop | 
	 *             action+=restart | 
	 *             action+=redeploy | 
	 *             action+=log | 
	 *             action+=monitor | 
	 *             action+=run
	 *         )*
	 *     )
	 */
	protected void sequence_Module(ISerializationContext context, Module semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Uses returns Uses
	 *
	 * Constraint:
	 *     module=[Module|ID]
	 */
	protected void sequence_Uses(ISerializationContext context, Uses semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RuntimeDslPackage.Literals.USES__MODULE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RuntimeDslPackage.Literals.USES__MODULE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getUsesAccess().getModuleModuleIDTerminalRuleCall_1_0_1(), semanticObject.eGet(RuntimeDslPackage.Literals.USES__MODULE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     log returns log
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_log(ISerializationContext context, log semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RuntimeDslPackage.Literals.LOG__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RuntimeDslPackage.Literals.LOG__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLogAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     monitor returns monitor
	 *
	 * Constraint:
	 *     (name=ID value=NUMBER)
	 */
	protected void sequence_monitor(ISerializationContext context, monitor semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RuntimeDslPackage.Literals.MONITOR__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RuntimeDslPackage.Literals.MONITOR__NAME));
			if (transientValues.isValueTransient(semanticObject, RuntimeDslPackage.Literals.MONITOR__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RuntimeDslPackage.Literals.MONITOR__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMonitorAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getMonitorAccess().getValueNUMBERTerminalRuleCall_3_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     redeploy returns redeploy
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_redeploy(ISerializationContext context, redeploy semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RuntimeDslPackage.Literals.REDEPLOY__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RuntimeDslPackage.Literals.REDEPLOY__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRedeployAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     restart returns restart
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_restart(ISerializationContext context, restart semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RuntimeDslPackage.Literals.RESTART__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RuntimeDslPackage.Literals.RESTART__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRestartAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     run returns run
	 *
	 * Constraint:
	 *     module=[Module|ID]
	 */
	protected void sequence_run(ISerializationContext context, run semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RuntimeDslPackage.Literals.RUN__MODULE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RuntimeDslPackage.Literals.RUN__MODULE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRunAccess().getModuleModuleIDTerminalRuleCall_1_0_1(), semanticObject.eGet(RuntimeDslPackage.Literals.RUN__MODULE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     start returns start
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_start(ISerializationContext context, start semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RuntimeDslPackage.Literals.START__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RuntimeDslPackage.Literals.START__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStartAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     stop returns stop
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_stop(ISerializationContext context, stop semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RuntimeDslPackage.Literals.STOP__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RuntimeDslPackage.Literals.STOP__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStopAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
}

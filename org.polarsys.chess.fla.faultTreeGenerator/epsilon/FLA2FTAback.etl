/*******************************************************************************
 * Copyright (c) 2021, Intecs Solutions SpA
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v2.0
 * which accompanies this distribution, and is available at
 * https://www.eclipse.org/org/documents/epl-2.0/EPL-2.0.html
 *
 * SPDX-License-Identifier: EPL-2.0
 *  
 *   Contributors:
 *   Felicien Ihirwe
 *   Initial API and implementation and/or initial documentation
 *******************************************************************************/
/**
 */


pre{
	"Running transformation-------------------------".println();
	var mapping : Sequence ;
	var ftas : Sequence ;
	var parents : Sequence;
	var events : Sequence;
	var portNames : Sequence;
	var count : Integer;
	count=0;
	mapping = flamm!Port.allInstances();

	for(port in mapping){
		if(port.owner.parent.isUndefined()and port.owner.outputPorts.contains(port)){
			for(f in port.failures){
				if(f.id.contains("noFailure") = false){
					var fta = new emfta!FTAModel;
					fta.name = f.id + " failure of " + port.name + " in " + port.owner.name;
					ftas.add(fta);
				}
			}
		}
	}
}

rule outputOfComposite2FTA
transform c : flamm!CompositeComponent
to ev : emfta!Event{
	guard : c.parent.isUndefined()
	for(p in mapping){
		if(p.owner.parent.isUndefined()and p.owner.outputPorts.contains(p)){
			for(f in p.failures){
				f.id.println();
				for(ft in ftas){
					if(ft.name = f.id + " failure of " + p.name + " in " + p.owner.name){
						var e= new emfta!Event;
						e.name = f.id + " failure of " + p.name + " in " + p.owner.name;
						e.type = emfta!EventType#Intermediate;
						var gate : new emfta!Gate;
						e.gate = gate;
						e.gate.type = emfta!GateType#OR;
						e.description=""+ftas.getCount();
						e.gate.description=""+e.description;
						ft.events.add(e);
						parents.clear();
						for(con in p.connectedPorts){
							con.generateFollowings(f,con,ft,e);


							//							con.name.println();
							//							"connected to ------------------------------------------- ".println();
							//							for(rul in con.owner.rules){
							//								//								"Rule 1 processed!!-----".println();
							//								for(outexp in rul.outputExpression){
							//									if(outexp.port = con) //check also if a no failure outputs is there  and discard it
							//									{
							//
							//										for(f1 in outexp.failures){
							//											if(f1.id=f.id){
							//
							//												var eventSp : new emfta!Event;
							//											eventSp.name= f1.id + " failure of " + outexp.port.name + " in " + outexp.port.owner.name;
							//											eventSp.type = emfta!EventType#Intermediate;
							//											var gate : new emfta!Gate;
							//											eventSp.gate = gate;
							//											eventSp.gate.type = emfta!GateType#AND;
							//											eventSp.description=""+ftas.getCount();
							//											eventSp.gate.description=""+eventSp.description;
							//											e.gate.events.add(eventSp);
							//											ft.events.add(eventSp);
							//											for(inpexp in rul.inputExpression){
							//
							//												for(f2 in inpexp.failures){
							//
							//													if(f2.id.contains("noFailure")=true){
							//														var ev : new emfta!Event;
							//													ev.name =" INTERNAL failure in " + inpexp.port.owner.name;
							//													ev.type = emfta!EventType#Basic;
							//													ev.description=""+ftas.getCount();
							//													eventSp.gate.events.add(ev);
							//													ft.events.add(ev);
							//													parents.add(ev);
							//													}
							//													//													else if(f2.previousFailures.isEmpty()){
							//													//														var ev : new emfta!Event;
							//													//														ev.name =" MISSING CAUSE OF"+f2.id+" failure in " + inpexp.port.owner.name;
							//													//														ev.type = emfta!EventType#External;
							//													//														ft.events.add(ev);
							//													//														eventSp.gate.events.add(ev);
							//													//														parents.add(ev);
							//													//													}
							//													else{
							//														var ev : new emfta!Event;
							//													ev.name = f2.id + " failure of " + inpexp.port.name + " in " + inpexp.port.owner.name;
							//													ev.type = emfta!EventType#Intermediate;
							//													var gate : new emfta!Gate;
							//													ev.gate = gate;
							//													ev.gate.type = emfta!GateType#OR;
							//													ev.description=""+ftas.getCount();
							//													ev.gate.description=""+ev.description;
							//													eventSp.gate.events.add(ev);
							//													ft.events.add(ev);
							//													//													"I'm callinggg---------------!!!".println();
							//													for(con in inpexp.port.connectedPorts){
							//														//														con.name.println();
							//														//														"Iiiiiiiiiiiiiiiiiiii---------------!!!".println();
							//														con.generateFollowings(f2,con,ft,ev);
							//													}										
							//													}
							//												}
							//											}	
							//											}
							//
							//										}
							//
							//									}
							//								}
							//
							//
							//							}

						}
					}
				}
			}
		}
	}
}

operation flamm!Port generateFollowings(f : flamm!Failure, con : flamm!Port, ft : emfta!FTAModel, e : emfta!Event) : Sequence{
	//	"Create root___I'm called!!!".println();
	//	con.owner.parent.println();
	//	"connected to ------------------------------------------- ".println();

	if(con.owner.parent.isDefined()){

		if(con.owner.type.name="SimpleComponent"){
			"connected to ------------------------------------------- ".println();
			for(rul in con.owner.rules){
				for(outexp in rul.outputExpression){
					if(outexp.port = con) //check also if a no failure outputs is there  and discard it
					{

						for(f1 in outexp.failures){
							if(f1.id=f.id){

								var eventSp : new emfta!Event;
							eventSp.name= f1.id + " failure of " + outexp.port.name + " in " + outexp.port.owner.name;
							eventSp.type = emfta!EventType#Intermediate;
							var gate : new emfta!Gate;
							eventSp.gate = gate;
							eventSp.gate.type = emfta!GateType#AND;
							eventSp.description=""+ftas.getCount();
							eventSp.gate.description=""+eventSp.description;
							ft.events.add(eventSp);
							e.gate.events.add(eventSp);
							for(inpexp in rul.inputExpression){

								for(f2 in inpexp.failures){

									if(f2.id.contains("noFailure")=true){
										var ev : new emfta!Event;
									ev.name =" INTERNAL failure in " + inpexp.port.owner.name;
									ev.type = emfta!EventType#Basic;
									ev.description=""+ftas.getCount();
									eventSp.gate.events.add(ev);
									ft.events.add(ev);
									parents.add(ev);
									}

									else{
										var ev : new emfta!Event;
									ev.name = f2.id + " failure of " + inpexp.port.name + " in " + inpexp.port.owner.name;
									ev.type = emfta!EventType#Intermediate;
									var gate : new emfta!Gate;
									ev.gate = gate;
									ev.gate.type = emfta!GateType#OR;
									ev.description=""+ftas.getCount();
									ev.gate.description=""+ev.description;
									eventSp.gate.events.add(ev);
									ft.events.add(ev);
									for(con in inpexp.port.connectedPorts){
										//									con.name.println();

										con.generateFollowings(f2,con,ft,ev);
										//									"I'm callinggg---------------!!!".println();
										//									gate.events.size().println();
										//									"Hereeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee".println();
									}										
									}
								}
							}	
							}

						}

					}
				}


			}
		}
		else{

			for(p in con.connectedPorts){
				p.generateFollowings(f,p,ft,e);
			}
		}



	}
	else{
		//		for(fail in con.failures){
		var ev : new emfta!Event;
	ev.name =f.id + " failure INJECTED at " + con.name + " in " + con.owner.name;
	ev.type = emfta!EventType#External;
	ev.description=""+ftas.getCount();
	e.gate.events.add(ev);
	ft.events.add(ev);
	parents.add(e);
	//			}
	}						


	return parents;
}

operation Any getCount(): Integer{
	count=count+1;
	return count;
}



//rule outputOfComposite2FTA
//transform c : flamm!CompositeComponent
//to model : emfta!FTAModel{
//
//	guard : c.parent.isUndefined();
//
//	var firstelement : Boolean = true;
//
//	//	p.name.println();
//	//	" failure of------------------------------------------- ".println();
//
//	for(ft in ftas){
//		for (p in c.outputPorts){
//			
//			for(f in p.failures){
//				if(ft.name = f.id + " failure of " + p.name + " in " + p.owner.name){
//					if(firstelement = true){
//						if(f.id.contains("noFailure")=false){
//							var e= new emfta!Event;
//							model.events.add(e);
//

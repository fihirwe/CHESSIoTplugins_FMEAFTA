/*
 * generated by Xtext 2.12.0
 */
package org.polarsys.chess.iot.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class RuntimeDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.polarsys.chess.iot.RuntimeDsl.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnvironmentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cModuleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cModuleModuleParserRuleCall_2_0 = (RuleCall)cModuleAssignment_2.eContents().get(0);
		
		//Model:
		//	'Environment:' name=ID
		//	module+=Module*;
		@Override public ParserRule getRule() { return rule; }
		
		//'Environment:' name=ID module+=Module*
		public Group getGroup() { return cGroup; }
		
		//'Environment:'
		public Keyword getEnvironmentKeyword_0() { return cEnvironmentKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//module+=Module*
		public Assignment getModuleAssignment_2() { return cModuleAssignment_2; }
		
		//Module
		public RuleCall getModuleModuleParserRuleCall_2_0() { return cModuleModuleParserRuleCall_2_0; }
	}
	public class ModuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.polarsys.chess.iot.RuntimeDsl.Module");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBeginModuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cNameKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cUsesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cUsesUsesParserRuleCall_3_0 = (RuleCall)cUsesAssignment_3.eContents().get(0);
		private final Keyword cActionKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Assignment cActionAssignment_5_0 = (Assignment)cAlternatives_5.eContents().get(0);
		private final RuleCall cActionStartParserRuleCall_5_0_0 = (RuleCall)cActionAssignment_5_0.eContents().get(0);
		private final Assignment cActionAssignment_5_1 = (Assignment)cAlternatives_5.eContents().get(1);
		private final RuleCall cActionStopParserRuleCall_5_1_0 = (RuleCall)cActionAssignment_5_1.eContents().get(0);
		private final Assignment cActionAssignment_5_2 = (Assignment)cAlternatives_5.eContents().get(2);
		private final RuleCall cActionRestartParserRuleCall_5_2_0 = (RuleCall)cActionAssignment_5_2.eContents().get(0);
		private final Assignment cActionAssignment_5_3 = (Assignment)cAlternatives_5.eContents().get(3);
		private final RuleCall cActionRedeployParserRuleCall_5_3_0 = (RuleCall)cActionAssignment_5_3.eContents().get(0);
		private final Assignment cActionAssignment_5_4 = (Assignment)cAlternatives_5.eContents().get(4);
		private final RuleCall cActionLogParserRuleCall_5_4_0 = (RuleCall)cActionAssignment_5_4.eContents().get(0);
		private final Assignment cActionAssignment_5_5 = (Assignment)cAlternatives_5.eContents().get(5);
		private final RuleCall cActionMonitorParserRuleCall_5_5_0 = (RuleCall)cActionAssignment_5_5.eContents().get(0);
		private final Assignment cActionAssignment_5_6 = (Assignment)cAlternatives_5.eContents().get(6);
		private final RuleCall cActionRunParserRuleCall_5_6_0 = (RuleCall)cActionAssignment_5_6.eContents().get(0);
		private final Keyword cEndModuleKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Module:
		//	'--Begin-Module--'
		//	'name:' name=ID
		//	uses+=Uses*
		//	'action:' (action+=start | action+=stop | action+=restart | action+=redeploy | action+=log | action+=monitor |
		//	action+=run)*
		//	'--End-Module--';
		@Override public ParserRule getRule() { return rule; }
		
		//'--Begin-Module--' 'name:' name=ID uses+=Uses* 'action:' (action+=start | action+=stop | action+=restart |
		//action+=redeploy | action+=log | action+=monitor | action+=run)* '--End-Module--'
		public Group getGroup() { return cGroup; }
		
		//'--Begin-Module--'
		public Keyword getBeginModuleKeyword_0() { return cBeginModuleKeyword_0; }
		
		//'name:'
		public Keyword getNameKeyword_1() { return cNameKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//uses+=Uses*
		public Assignment getUsesAssignment_3() { return cUsesAssignment_3; }
		
		//Uses
		public RuleCall getUsesUsesParserRuleCall_3_0() { return cUsesUsesParserRuleCall_3_0; }
		
		//'action:'
		public Keyword getActionKeyword_4() { return cActionKeyword_4; }
		
		//(action+=start | action+=stop | action+=restart | action+=redeploy | action+=log | action+=monitor | action+=run)*
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//action+=start
		public Assignment getActionAssignment_5_0() { return cActionAssignment_5_0; }
		
		//start
		public RuleCall getActionStartParserRuleCall_5_0_0() { return cActionStartParserRuleCall_5_0_0; }
		
		//action+=stop
		public Assignment getActionAssignment_5_1() { return cActionAssignment_5_1; }
		
		//stop
		public RuleCall getActionStopParserRuleCall_5_1_0() { return cActionStopParserRuleCall_5_1_0; }
		
		//action+=restart
		public Assignment getActionAssignment_5_2() { return cActionAssignment_5_2; }
		
		//restart
		public RuleCall getActionRestartParserRuleCall_5_2_0() { return cActionRestartParserRuleCall_5_2_0; }
		
		//action+=redeploy
		public Assignment getActionAssignment_5_3() { return cActionAssignment_5_3; }
		
		//redeploy
		public RuleCall getActionRedeployParserRuleCall_5_3_0() { return cActionRedeployParserRuleCall_5_3_0; }
		
		//action+=log
		public Assignment getActionAssignment_5_4() { return cActionAssignment_5_4; }
		
		//log
		public RuleCall getActionLogParserRuleCall_5_4_0() { return cActionLogParserRuleCall_5_4_0; }
		
		//action+=monitor
		public Assignment getActionAssignment_5_5() { return cActionAssignment_5_5; }
		
		//monitor
		public RuleCall getActionMonitorParserRuleCall_5_5_0() { return cActionMonitorParserRuleCall_5_5_0; }
		
		//action+=run
		public Assignment getActionAssignment_5_6() { return cActionAssignment_5_6; }
		
		//run
		public RuleCall getActionRunParserRuleCall_5_6_0() { return cActionRunParserRuleCall_5_6_0; }
		
		//'--End-Module--'
		public Keyword getEndModuleKeyword_6() { return cEndModuleKeyword_6; }
	}
	public class StartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.polarsys.chess.iot.RuntimeDsl.start");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSTARTServiceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//start:
		//	'START-service' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'START-service' name=ID
		public Group getGroup() { return cGroup; }
		
		//'START-service'
		public Keyword getSTARTServiceKeyword_0() { return cSTARTServiceKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class StopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.polarsys.chess.iot.RuntimeDsl.stop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSTOPServiceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//stop:
		//	'STOP-service' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'STOP-service' name=ID
		public Group getGroup() { return cGroup; }
		
		//'STOP-service'
		public Keyword getSTOPServiceKeyword_0() { return cSTOPServiceKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class RestartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.polarsys.chess.iot.RuntimeDsl.restart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRESTARTServiceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//restart:
		//	'RESTART-service' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'RESTART-service' name=ID
		public Group getGroup() { return cGroup; }
		
		//'RESTART-service'
		public Keyword getRESTARTServiceKeyword_0() { return cRESTARTServiceKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class RedeployElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.polarsys.chess.iot.RuntimeDsl.redeploy");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cREDEPLOYServiceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//redeploy:
		//	'REDEPLOY-service' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'REDEPLOY-service' name=ID
		public Group getGroup() { return cGroup; }
		
		//'REDEPLOY-service'
		public Keyword getREDEPLOYServiceKeyword_0() { return cREDEPLOYServiceKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class LogElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.polarsys.chess.iot.RuntimeDsl.log");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLOGServiceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//log:
		//	'LOG-service' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'LOG-service' name=ID
		public Group getGroup() { return cGroup; }
		
		//'LOG-service'
		public Keyword getLOGServiceKeyword_0() { return cLOGServiceKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class MonitorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.polarsys.chess.iot.RuntimeDsl.monitor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMONITORServiceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cPeriodKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueNUMBERTerminalRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Keyword cMsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//monitor:
		//	'MONITOR-service' name=ID
		//	'period:' value=NUMBER 'ms';
		@Override public ParserRule getRule() { return rule; }
		
		//'MONITOR-service' name=ID 'period:' value=NUMBER 'ms'
		public Group getGroup() { return cGroup; }
		
		//'MONITOR-service'
		public Keyword getMONITORServiceKeyword_0() { return cMONITORServiceKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'period:'
		public Keyword getPeriodKeyword_2() { return cPeriodKeyword_2; }
		
		//value=NUMBER
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//NUMBER
		public RuleCall getValueNUMBERTerminalRuleCall_3_0() { return cValueNUMBERTerminalRuleCall_3_0; }
		
		//'ms'
		public Keyword getMsKeyword_4() { return cMsKeyword_4; }
	}
	public class RunElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.polarsys.chess.iot.RuntimeDsl.run");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRUNModuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cModuleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cModuleModuleCrossReference_1_0 = (CrossReference)cModuleAssignment_1.eContents().get(0);
		private final RuleCall cModuleModuleIDTerminalRuleCall_1_0_1 = (RuleCall)cModuleModuleCrossReference_1_0.eContents().get(1);
		
		//run:
		//	'RUN-module' module=[Module];
		@Override public ParserRule getRule() { return rule; }
		
		//'RUN-module' module=[Module]
		public Group getGroup() { return cGroup; }
		
		//'RUN-module'
		public Keyword getRUNModuleKeyword_0() { return cRUNModuleKeyword_0; }
		
		//module=[Module]
		public Assignment getModuleAssignment_1() { return cModuleAssignment_1; }
		
		//[Module]
		public CrossReference getModuleModuleCrossReference_1_0() { return cModuleModuleCrossReference_1_0; }
		
		//ID
		public RuleCall getModuleModuleIDTerminalRuleCall_1_0_1() { return cModuleModuleIDTerminalRuleCall_1_0_1; }
	}
	public class UsesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.polarsys.chess.iot.RuntimeDsl.Uses");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cModuleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cModuleModuleCrossReference_1_0 = (CrossReference)cModuleAssignment_1.eContents().get(0);
		private final RuleCall cModuleModuleIDTerminalRuleCall_1_0_1 = (RuleCall)cModuleModuleCrossReference_1_0.eContents().get(1);
		
		//Uses:
		//	'use' module=[Module];
		@Override public ParserRule getRule() { return rule; }
		
		//'use' module=[Module]
		public Group getGroup() { return cGroup; }
		
		//'use'
		public Keyword getUseKeyword_0() { return cUseKeyword_0; }
		
		//module=[Module]
		public Assignment getModuleAssignment_1() { return cModuleAssignment_1; }
		
		//[Module]
		public CrossReference getModuleModuleCrossReference_1_0() { return cModuleModuleCrossReference_1_0; }
		
		//ID
		public RuleCall getModuleModuleIDTerminalRuleCall_1_0_1() { return cModuleModuleIDTerminalRuleCall_1_0_1; }
	}
	
	
	private final ModelElements pModel;
	private final ModuleElements pModule;
	private final StartElements pStart;
	private final StopElements pStop;
	private final RestartElements pRestart;
	private final RedeployElements pRedeploy;
	private final LogElements pLog;
	private final MonitorElements pMonitor;
	private final RunElements pRun;
	private final UsesElements pUses;
	private final TerminalRule tNUMBER;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public RuntimeDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pModule = new ModuleElements();
		this.pStart = new StartElements();
		this.pStop = new StopElements();
		this.pRestart = new RestartElements();
		this.pRedeploy = new RedeployElements();
		this.pLog = new LogElements();
		this.pMonitor = new MonitorElements();
		this.pRun = new RunElements();
		this.pUses = new UsesElements();
		this.tNUMBER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.polarsys.chess.iot.RuntimeDsl.NUMBER");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.polarsys.chess.iot.RuntimeDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	'Environment:' name=ID
	//	module+=Module*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Module:
	//	'--Begin-Module--'
	//	'name:' name=ID
	//	uses+=Uses*
	//	'action:' (action+=start | action+=stop | action+=restart | action+=redeploy | action+=log | action+=monitor |
	//	action+=run)*
	//	'--End-Module--';
	public ModuleElements getModuleAccess() {
		return pModule;
	}
	
	public ParserRule getModuleRule() {
		return getModuleAccess().getRule();
	}
	
	//start:
	//	'START-service' name=ID;
	public StartElements getStartAccess() {
		return pStart;
	}
	
	public ParserRule getStartRule() {
		return getStartAccess().getRule();
	}
	
	//stop:
	//	'STOP-service' name=ID;
	public StopElements getStopAccess() {
		return pStop;
	}
	
	public ParserRule getStopRule() {
		return getStopAccess().getRule();
	}
	
	//restart:
	//	'RESTART-service' name=ID;
	public RestartElements getRestartAccess() {
		return pRestart;
	}
	
	public ParserRule getRestartRule() {
		return getRestartAccess().getRule();
	}
	
	//redeploy:
	//	'REDEPLOY-service' name=ID;
	public RedeployElements getRedeployAccess() {
		return pRedeploy;
	}
	
	public ParserRule getRedeployRule() {
		return getRedeployAccess().getRule();
	}
	
	//log:
	//	'LOG-service' name=ID;
	public LogElements getLogAccess() {
		return pLog;
	}
	
	public ParserRule getLogRule() {
		return getLogAccess().getRule();
	}
	
	//monitor:
	//	'MONITOR-service' name=ID
	//	'period:' value=NUMBER 'ms';
	public MonitorElements getMonitorAccess() {
		return pMonitor;
	}
	
	public ParserRule getMonitorRule() {
		return getMonitorAccess().getRule();
	}
	
	//run:
	//	'RUN-module' module=[Module];
	public RunElements getRunAccess() {
		return pRun;
	}
	
	public ParserRule getRunRule() {
		return getRunAccess().getRule();
	}
	
	//Uses:
	//	'use' module=[Module];
	public UsesElements getUsesAccess() {
		return pUses;
	}
	
	public ParserRule getUsesRule() {
		return getUsesAccess().getRule();
	}
	
	//terminal NUMBER returns ecore::EBigDecimal:
	//	'0'..'9'* ('.' '0'..'9'+)?;
	public TerminalRule getNUMBERRule() {
		return tNUMBER;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}

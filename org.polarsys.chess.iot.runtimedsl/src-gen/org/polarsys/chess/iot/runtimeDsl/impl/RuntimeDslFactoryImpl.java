/**
 * generated by Xtext 2.12.0
 */
package org.polarsys.chess.iot.runtimeDsl.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.polarsys.chess.iot.runtimeDsl.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class RuntimeDslFactoryImpl extends EFactoryImpl implements RuntimeDslFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static RuntimeDslFactory init()
  {
    try
    {
      RuntimeDslFactory theRuntimeDslFactory = (RuntimeDslFactory)EPackage.Registry.INSTANCE.getEFactory(RuntimeDslPackage.eNS_URI);
      if (theRuntimeDslFactory != null)
      {
        return theRuntimeDslFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new RuntimeDslFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RuntimeDslFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case RuntimeDslPackage.DEPLOYMENT: return createDeployment();
      case RuntimeDslPackage.EXPRESSION: return createExpression();
      case RuntimeDslPackage.ABSTRACT_AGENT: return createAbstractAgent();
      case RuntimeDslPackage.RULE: return createrule();
      case RuntimeDslPackage.CREATE: return createcreate();
      case RuntimeDslPackage.START: return createstart();
      case RuntimeDslPackage.STOP: return createstop();
      case RuntimeDslPackage.RESTART: return createrestart();
      case RuntimeDslPackage.REDEPLOY: return createredeploy();
      case RuntimeDslPackage.LOG: return createlog();
      case RuntimeDslPackage.RERUN_AGENT: return creatererunAgent();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case RuntimeDslPackage.LOG_TYPE:
        return createLogTypeFromString(eDataType, initialValue);
      case RuntimeDslPackage.BOOLEAN:
        return createBOOLEANFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case RuntimeDslPackage.LOG_TYPE:
        return convertLogTypeToString(eDataType, instanceValue);
      case RuntimeDslPackage.BOOLEAN:
        return convertBOOLEANToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Deployment createDeployment()
  {
    DeploymentImpl deployment = new DeploymentImpl();
    return deployment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expression createExpression()
  {
    ExpressionImpl expression = new ExpressionImpl();
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AbstractAgent createAbstractAgent()
  {
    AbstractAgentImpl abstractAgent = new AbstractAgentImpl();
    return abstractAgent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public rule createrule()
  {
    ruleImpl rule = new ruleImpl();
    return rule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public create createcreate()
  {
    createImpl create = new createImpl();
    return create;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public start createstart()
  {
    startImpl start = new startImpl();
    return start;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public stop createstop()
  {
    stopImpl stop = new stopImpl();
    return stop;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public restart createrestart()
  {
    restartImpl restart = new restartImpl();
    return restart;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public redeploy createredeploy()
  {
    redeployImpl redeploy = new redeployImpl();
    return redeploy;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public log createlog()
  {
    logImpl log = new logImpl();
    return log;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public rerunAgent creatererunAgent()
  {
    rerunAgentImpl rerunAgent = new rerunAgentImpl();
    return rerunAgent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LogType createLogTypeFromString(EDataType eDataType, String initialValue)
  {
    LogType result = LogType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertLogTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BOOLEAN createBOOLEANFromString(EDataType eDataType, String initialValue)
  {
    BOOLEAN result = BOOLEAN.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertBOOLEANToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RuntimeDslPackage getRuntimeDslPackage()
  {
    return (RuntimeDslPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static RuntimeDslPackage getPackage()
  {
    return RuntimeDslPackage.eINSTANCE;
  }

} //RuntimeDslFactoryImpl

// automatically generated by Xtext
grammar org.polarsys.chess.iot.dsl.CHESSIoT with org.eclipse.xtext.common.Terminals

import "http:///CHESSIoT/CHESSIoTDeployment.ecore" 
import "http:///CHESSIoT/CHESSIoTSoftware.ecore" as CHESSIoTSoftware
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

System returns System:
	'System'
	'{'
		'name' name=EDataType
		'node' '(' node+=[Node|EString] ( "," node+=[Node|EString])* ')' 
		'base_Component' base_Component=[|EString]
	'}';

Node returns Node:
	Node_Impl | FogNode | DeviceNode | CloudNode;

Service returns Service:
	Service_Impl | MQTTBroker | EndUserApplication | ExternalService | DataDistributionService | StorageService;





VirtualElement returns CHESSIoTSoftware::VirtualElement:
	VirtualElement_Impl | VirtualBoard | Sensor | Actuator;


IoTPort returns CHESSIoTSoftware::IoTPort:
	IoTPort_Impl | MQTTPort;



Action returns CHESSIoTSoftware::Action:
	Action_Impl | Send | Generic_Impl | External | Loop | Condition | Assignemt | Print | Error | FunctionCall;




Node_Impl returns Node:
	'Node'
	'{'
		'name' name=EDataType0
		'opSystem' opSystem=EDataType1
		'memory' memory=EDataType2
		'base_Component' base_Component=[|EString]
	'}';

EDataType returns :
	'null' /* TODO: implement this rule and an appropriate IValueConverter */;

EClass returns :
	{}
	''
	;

EDataType0 returns :
	'null' /* TODO: implement this rule and an appropriate IValueConverter */;

EDataType1 returns :
	'null' /* TODO: implement this rule and an appropriate IValueConverter */;

EClass0 returns :
	{}
	''
	;

EDataType2 returns :
	'null' /* TODO: implement this rule and an appropriate IValueConverter */;

FogNode returns FogNode:
	'FogNode'
	'{'
		'name' name=EDataType0
		'opSystem' opSystem=EDataType1
		'memory' memory=EDataType2
		'base_Component' base_Component=[|EString]
		'clients' '(' clients+=[DeviceNode|EString] ( "," clients+=[DeviceNode|EString])* ')' 
		'deviceresources' '(' deviceresources+=[FogOrchestrator|EString] ( "," deviceresources+=[FogOrchestrator|EString])* ')' 
		'container' '(' container+=[Container|EString] ( "," container+=[Container|EString])* ')' 
		'devicenode' '(' devicenode+=[DeviceNode|EString] ( "," devicenode+=[DeviceNode|EString])* ')' 
	'}';

DeviceNode returns DeviceNode:
	'DeviceNode'
	'{'
		'name' name=EDataType0
		'opSystem' opSystem=EDataType1
		'memory' memory=EDataType2
		'base_Component' base_Component=[|EString]
		'deviceresources' deviceresources=[DeviceResources|EString]
		'pysicalDevice' pysicalDevice=[CHESSIoTSoftware::VirtualBoard|EString]
	'}';

CloudNode returns CloudNode:
	'CloudNode'
	'{'
		'name' name=EDataType0
		'opSystem' opSystem=EDataType1
		'memory' memory=EDataType2
		'base_Component' base_Component=[|EString]
		'container' '(' container+=[Container|EString] ( "," container+=[Container|EString])* ')' 
		'cloudresources' '(' cloudresources+=[CloudOrchestrator|EString] ( "," cloudresources+=[CloudOrchestrator|EString])* ')' 
	'}';

FogOrchestrator returns FogOrchestrator:
	'FogOrchestrator'
	'{'
		'configuration' '{' configuration+=EDataType3 ( "," configuration+=EDataType3)* '}' 
		'base_Constraint' base_Constraint=[|EString]
	'}';

Container returns Container:
	'Container'
	'{'
		'serviceHosted' serviceHosted=[Service|EString]
		'base_Component' base_Component=[|EString]
	'}';

EDataType3 returns :
	'null' /* TODO: implement this rule and an appropriate IValueConverter */;

EClass1 returns :
	{}
	''
	;

Service_Impl returns Service:
	'Service'
	'{'
		'name' name=EDataType4
		'imageURL' imageURL=EDataType5
		'ports' '{' ports+=EDataType6 ( "," ports+=EDataType6)* '}' 
		'volumes' '{' volumes+=EDataType7 ( "," volumes+=EDataType7)* '}' 
		'servicePriority' servicePriority=EDataType8
		'depends' depends=[Service|EString]
		'base_Class' base_Class=[|EString]
		'service' service=[Service|EString]
	'}';

EClass2 returns :
	{}
	''
	;

EDataType4 returns :
	'null' /* TODO: implement this rule and an appropriate IValueConverter */;

EDataType5 returns :
	'null' /* TODO: implement this rule and an appropriate IValueConverter */;

EDataType6 returns :
	'null' /* TODO: implement this rule and an appropriate IValueConverter */;

EDataType7 returns :
	'null' /* TODO: implement this rule and an appropriate IValueConverter */;

EDataType8 returns :
	'null' /* TODO: implement this rule and an appropriate IValueConverter */;

EClass3 returns :
	{}
	''
	;

MQTTBroker returns MQTTBroker:
	'MQTTBroker'
	'{'
		'name' name=EDataType4
		'imageURL' imageURL=EDataType5
		'ports' '{' ports+=EDataType6 ( "," ports+=EDataType6)* '}' 
		'volumes' '{' volumes+=EDataType7 ( "," volumes+=EDataType7)* '}' 
		'servicePriority' servicePriority=EDataType8
		'type' type=BrokerType
		'anonymous' anonymous=EDataType9
		'persistence' persistence=EDataType10
		'username' username=EDataType11
		'password' password=EDataType12
		'depends' depends=[Service|EString]
		'base_Class' base_Class=[|EString]
		'service' service=[Service|EString]
	'}';

EndUserApplication returns EndUserApplication:
	'EndUserApplication'
	'{'
		'name' name=EDataType4
		'imageURL' imageURL=EDataType5
		'ports' '{' ports+=EDataType6 ( "," ports+=EDataType6)* '}' 
		'volumes' '{' volumes+=EDataType7 ( "," volumes+=EDataType7)* '}' 
		'servicePriority' servicePriority=EDataType8
		'customConf' customConf=EDataType13
		'depends' depends=[Service|EString]
		'base_Class' base_Class=[|EString]
		'service' service=[Service|EString]
	'}';

ExternalService returns ExternalService:
	'ExternalService'
	'{'
		'name' name=EDataType4
		'imageURL' imageURL=EDataType5
		'ports' '{' ports+=EDataType6 ( "," ports+=EDataType6)* '}' 
		'volumes' '{' volumes+=EDataType7 ( "," volumes+=EDataType7)* '}' 
		'servicePriority' servicePriority=EDataType8
		'depends' depends=[Service|EString]
		'base_Class' base_Class=[|EString]
		'service' service=[Service|EString]
	'}';

DataDistributionService returns DataDistributionService:
	'DataDistributionService'
	'{'
		'name' name=EDataType4
		'imageURL' imageURL=EDataType5
		'ports' '{' ports+=EDataType6 ( "," ports+=EDataType6)* '}' 
		'volumes' '{' volumes+=EDataType7 ( "," volumes+=EDataType7)* '}' 
		'servicePriority' servicePriority=EDataType8
		'type' type=DDSType
		'depends' depends=[Service|EString]
		'base_Class' base_Class=[|EString]
		'service' service=[Service|EString]
	'}';

StorageService returns StorageService:
	'StorageService'
	'{'
		'name' name=EDataType4
		'imageURL' imageURL=EDataType5
		'ports' '{' ports+=EDataType6 ( "," ports+=EDataType6)* '}' 
		'volumes' '{' volumes+=EDataType7 ( "," volumes+=EDataType7)* '}' 
		'servicePriority' servicePriority=EDataType8
		'depends' depends=[Service|EString]
		'base_Class' base_Class=[|EString]
		'service' service=[Service|EString]
	'}';

enum BrokerType returns BrokerType:
				MOSQUITTO = 'MOSQUITTO' | HIVEMQ = 'HIVEMQ' | MOQUETTE = 'MOQUETTE';

EDataType9 returns :
	'null' /* TODO: implement this rule and an appropriate IValueConverter */;

EDataType10 returns :
	'null' /* TODO: implement this rule and an appropriate IValueConverter */;

EDataType11 returns :
	'null' /* TODO: implement this rule and an appropriate IValueConverter */;

EDataType12 returns :
	'null' /* TODO: implement this rule and an appropriate IValueConverter */;

EDataType13 returns :
	'null' /* TODO: implement this rule and an appropriate IValueConverter */;

enum DDSType returns DDSType:
				KAFKA = 'KAFKA' | RabbitMQ = 'RabbitMQ' | ApacheSpark = 'ApacheSpark';

DeviceResources returns DeviceResources:
	'DeviceResources'
	'{'
		'path' path=EDataType14
		'base_Comment' base_Comment=[|EString]
	'}';

VirtualBoard returns CHESSIoTSoftware::VirtualBoard:
	'VirtualBoard'
	'{'
		'id' id=EDataType15
		'name' name=EDataType16
		'base_Component' base_Component=[|EString]
		'virtualelement' virtualelement=[CHESSIoTSoftware::VirtualElement|EString]
		'virtualentity' virtualentity=[CHESSIoTSoftware::VirtualEntity|EString]
		'iotport' '(' iotport+=[CHESSIoTSoftware::IoTPort|EString] ( "," iotport+=[CHESSIoTSoftware::IoTPort|EString])* ')' 
		('sensor' '(' sensor+=[CHESSIoTSoftware::Sensor|EString] ( "," sensor+=[CHESSIoTSoftware::Sensor|EString])* ')' )?
		('actuator' '(' actuator+=[CHESSIoTSoftware::Actuator|EString] ( "," actuator+=[CHESSIoTSoftware::Actuator|EString])* ')' )?
		'statemachine' '{' statemachine+=StateMachine ( "," statemachine+=StateMachine)* '}' 
	'}';

EDataType14 returns :
	'null' /* TODO: implement this rule and an appropriate IValueConverter */;

EClass4 returns :
	{}
	''
	;

EDataType15 returns :
	'null' /* TODO: implement this rule and an appropriate IValueConverter */;

EDataType16 returns :
	'null' /* TODO: implement this rule and an appropriate IValueConverter */;

EClass5 returns :
	{}
	''
	;

VirtualElement_Impl returns CHESSIoTSoftware::VirtualElement:
	'VirtualElement'
	'{'
		'id' id=EDataType15
		'name' name=EDataType16
		'base_Component' base_Component=[|EString]
		'virtualelement' virtualelement=[CHESSIoTSoftware::VirtualElement|EString]
		'virtualentity' virtualentity=[CHESSIoTSoftware::VirtualEntity|EString]
		'iotport' '(' iotport+=[CHESSIoTSoftware::IoTPort|EString] ( "," iotport+=[CHESSIoTSoftware::IoTPort|EString])* ')' 
		'statemachine' '{' statemachine+=StateMachine ( "," statemachine+=StateMachine)* '}' 
	'}';

VirtualEntity returns CHESSIoTSoftware::VirtualEntity:
	'VirtualEntity'
	'{'
		'id' id=EDataType17
		'name' name=EDataType18
		'base_Component' base_Component=[|EString]
		'virtualentity' virtualentity=[CHESSIoTSoftware::VirtualEntity|EString]
	'}';

IoTPort_Impl returns CHESSIoTSoftware::IoTPort:
	'IoTPort'
	'{'
		('connectionPins' '{' connectionPins+=EDataType19 ( "," connectionPins+=EDataType19)* '}' )?
		'base_Port' base_Port=[|EString]
		'send_payload' '(' send_payload+=[CHESSIoTSoftware::Payload|EString] ( "," send_payload+=[CHESSIoTSoftware::Payload|EString])* ')' 
		'receive_payload' '(' receive_payload+=[CHESSIoTSoftware::Payload|EString] ( "," receive_payload+=[CHESSIoTSoftware::Payload|EString])* ')' 
	'}';

StateMachine returns CHESSIoTSoftware::StateMachine:
	'StateMachine'
	'{'
		'base_StateMachine' base_StateMachine=[|EString]
		'iotstate' iotstate=[CHESSIoTSoftware::IoTState|EString]
	'}';

Sensor returns CHESSIoTSoftware::Sensor:
	'Sensor'
	'{'
		'id' id=EDataType15
		'name' name=EDataType16
		'base_Component' base_Component=[|EString]
		'virtualelement' virtualelement=[CHESSIoTSoftware::VirtualElement|EString]
		'virtualentity' virtualentity=[CHESSIoTSoftware::VirtualEntity|EString]
		'iotport' '(' iotport+=[CHESSIoTSoftware::IoTPort|EString] ( "," iotport+=[CHESSIoTSoftware::IoTPort|EString])* ')' 
		'computingnode' computingnode=[CHESSIoTSoftware::VirtualBoard|EString]
		'statemachine' '{' statemachine+=StateMachine ( "," statemachine+=StateMachine)* '}' 
	'}';

Actuator returns CHESSIoTSoftware::Actuator:
	'Actuator'
	'{'
		'id' id=EDataType15
		'name' name=EDataType16
		'base_Component' base_Component=[|EString]
		'virtualelement' virtualelement=[CHESSIoTSoftware::VirtualElement|EString]
		'virtualentity' virtualentity=[CHESSIoTSoftware::VirtualEntity|EString]
		'iotport' '(' iotport+=[CHESSIoTSoftware::IoTPort|EString] ( "," iotport+=[CHESSIoTSoftware::IoTPort|EString])* ')' 
		'statemachine' '{' statemachine+=StateMachine ( "," statemachine+=StateMachine)* '}' 
	'}';

EClass6 returns :
	{}
	''
	;

EDataType17 returns :
	'null' /* TODO: implement this rule and an appropriate IValueConverter */;

EDataType18 returns :
	'null' /* TODO: implement this rule and an appropriate IValueConverter */;

EClass7 returns :
	{}
	''
	;

EDataType19 returns :
	'null' /* TODO: implement this rule and an appropriate IValueConverter */;

Payload returns CHESSIoTSoftware::Payload:
	'Payload'
	'{'
		'base_Class' base_Class=[|EString]
		'have' '{' have+=PayloadParameters ( "," have+=PayloadParameters)* '}' 
	'}';

MQTTPort returns CHESSIoTSoftware::MQTTPort:
	'MQTTPort'
	'{'
		('connectionPins' '{' connectionPins+=EDataType19 ( "," connectionPins+=EDataType19)* '}' )?
		'payloadType' payloadType=EDataType20
		'brokerAdress' brokerAdress=EDataType21
		'topic' topic=EDataType22
		'type' type=AccessMode
		'base_Port' base_Port=[|EString]
		'send_payload' '(' send_payload+=[CHESSIoTSoftware::Payload|EString] ( "," send_payload+=[CHESSIoTSoftware::Payload|EString])* ')' 
		'receive_payload' '(' receive_payload+=[CHESSIoTSoftware::Payload|EString] ( "," receive_payload+=[CHESSIoTSoftware::Payload|EString])* ')' 
	'}';

EClass8 returns :
	{}
	''
	;

PayloadParameters returns CHESSIoTSoftware::PayloadParameters:
	'PayloadParameters'
	'{'
		'base_Property' base_Property=[|EString]
	'}';

EClass9 returns :
	{}
	''
	;

EDataType20 returns :
	'null' /* TODO: implement this rule and an appropriate IValueConverter */;

EDataType21 returns :
	'null' /* TODO: implement this rule and an appropriate IValueConverter */;

EDataType22 returns :
	'null' /* TODO: implement this rule and an appropriate IValueConverter */;

enum AccessMode returns CHESSIoTSoftware::AccessMode:
				SUBSCRIBER = 'SUBSCRIBER' | PUBLISHER = 'PUBLISHER' | PUBSUB = 'PUBSUB';

EClass10 returns :
	{}
	''
	;

IoTState returns CHESSIoTSoftware::IoTState:
	'IoTState'
	'{'
		'base_State' base_State=[|EString]
		'onExit' '(' onExit+=[CHESSIoTSoftware::Action|EString] ( "," onExit+=[CHESSIoTSoftware::Action|EString])* ')' 
		'internal' '(' internal+=[CHESSIoTSoftware::InternalEvent|EString] ( "," internal+=[CHESSIoTSoftware::InternalEvent|EString])* ')' 
		'onEntry' '(' onEntry+=[CHESSIoTSoftware::Action|EString] ( "," onEntry+=[CHESSIoTSoftware::Action|EString])* ')' 
	'}';

EClass11 returns :
	{}
	''
	;

Action_Impl returns CHESSIoTSoftware::Action:
	'Action'
	'{'
		'base_Class' base_Class=[|EString]
	'}';

InternalEvent returns CHESSIoTSoftware::InternalEvent:
	'InternalEvent'
	'{'
		'payload' payload=[CHESSIoTSoftware::Payload|EString]
		'iotport' iotport=[CHESSIoTSoftware::IoTPort|EString]
		'base_Class' base_Class=[|EString]
		'action' '(' action+=[CHESSIoTSoftware::Action|EString] ( "," action+=[CHESSIoTSoftware::Action|EString])* ')' 
	'}';

EClass12 returns :
	{}
	''
	;

Send returns CHESSIoTSoftware::Send:
	'Send'
	'{'
		'base_Class' base_Class=[|EString]
		'payload' payload=[CHESSIoTSoftware::Payload|EString]
		'port' port=[CHESSIoTSoftware::IoTPort|EString]
	'}';

Generic_Impl returns CHESSIoTSoftware::Generic:
	'Generic'
	'{'
		'implementation' implementation=EDataType23
		'base_Class' base_Class=[|EString]
	'}';

External returns CHESSIoTSoftware::External:
	'External'
	'{'
		'implementation' implementation=EDataType23
		'base_Class' base_Class=[|EString]
	'}';

Loop returns CHESSIoTSoftware::Loop:
	'Loop'
	'{'
		'implementation' implementation=EDataType23
		'base_Class' base_Class=[|EString]
	'}';

Condition returns CHESSIoTSoftware::Condition:
	'Condition'
	'{'
		'implementation' implementation=EDataType23
		'base_Class' base_Class=[|EString]
	'}';

Assignemt returns CHESSIoTSoftware::Assignemt:
	'Assignemt'
	'{'
		'implementation' implementation=EDataType23
		'base_Class' base_Class=[|EString]
	'}';

Print returns CHESSIoTSoftware::Print:
	'Print'
	'{'
		'implementation' implementation=EDataType23
		'base_Class' base_Class=[|EString]
	'}';

Error returns CHESSIoTSoftware::Error:
	'Error'
	'{'
		'implementation' implementation=EDataType23
		'base_Class' base_Class=[|EString]
	'}';

FunctionCall returns CHESSIoTSoftware::FunctionCall:
	'FunctionCall'
	'{'
		'implementation' implementation=EDataType23
		'base_Class' base_Class=[|EString]
	'}';

EDataType23 returns :
	'null' /* TODO: implement this rule and an appropriate IValueConverter */;

EClass13 returns :
	{}
	''
	;

CloudOrchestrator returns CloudOrchestrator:
	'CloudOrchestrator'
	'{'
		'configuration' '{' configuration+=EDataType3 ( "," configuration+=EDataType3)* '}' 
		'base_Constraint' base_Constraint=[|EString]
	'}';

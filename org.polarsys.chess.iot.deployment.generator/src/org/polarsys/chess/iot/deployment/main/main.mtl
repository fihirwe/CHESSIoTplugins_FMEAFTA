[comment encoding = UTF-8 /]
[module main('http://www.eclipse.org/uml2/5.0.0/UML')]

[import org::polarsys::chess::iot::deployment::legal::Copyright/]
[import org::polarsys::chess::iot::deployment::legal::License/]
[import org::polarsys::chess::iot::deployment::service::DeploymentServices/]
[import org::polarsys::chess::iot::deployment::artifacts::generateBroker/]
[import org::polarsys::chess::iot::deployment::artifacts::generateExternalService /]
[import org::polarsys::chess::iot::deployment::artifacts::generateDataDistributionService /]
[import org::polarsys::chess::iot::deployment::artifacts::generateStorageService /]
[import org::polarsys::chess::iot::deployment::artifacts::generateEndUserApplication /]
[import org::polarsys::chess::iot::deployment::util::generateSetup /]
[import org::polarsys::chess::iot::deployment::ansible::generateAnsible /]
[template public generateDeployemnt(model: uml:: Model){
System :String ='CHESSIoT::CHESSIoTDeployment::System';
CloudNodeStereo : String ='CHESSIoT::CHESSIoTDeployment::CloudNode';
FogNodeStereo : String ='CHESSIoT::CHESSIoTDeployment::FogNode';
DeviceNodeStereo: String ='CHESSIoT::CHESSIoTDeployment::DeviceNode';
}]
[comment @main/]
[for (elt:Package|model.ownedElement->filter(Package))]
[if (elt.name='modelDeploymentView')]
[for (node : Component |  elt.allOwnedElements()->filter(Component))]
[if(node.getAppliedStereotype(CloudNodeStereo)->notEmpty())]
[generateMachine(node.name+'_cloud',node, elt)/]
[elseif (node.getAppliedStereotype(FogNodeStereo)->notEmpty())]
[generateMachine(node.name+'_fog',node, elt)/]	
[elseif (node.getAppliedStereotype(DeviceNodeStereo)->notEmpty())]
[generateMachine(node.name+'_device',node, elt)/]	
[/if]			 
[/for]
[/if]
[/for]
[/template]

[template public generateMachine(name : String,node : Component, elt:Package){
machinestereo :String ='CHESSIoT::CHESSIoTDeployment::Machine';
}]
[for(machine : Component | getSubComponent(node,elt))]
[if(machine.getAppliedStereotype(machinestereo)->notEmpty())]
[generateInfrastructure(name,machine,elt)/]
[/if]
[/for]
[/template]


[template public generateInfrastructure(name : String,machine : Component, elt:Package ){
ExternalService : String = 'CHESSIoT::CHESSIoTDeployment::ExternalService';
DataDistributionService : String = 'CHESSIoT::CHESSIoTDeployment::DataDistributionService';
MQTTBroker : String = 'CHESSIoT::CHESSIoTDeployment::MQTTBroker';
ServiceST : String = 'CHESSIoT::CHESSIoTDeployment::Service';
StorageService : String = 'CHESSIoT::CHESSIoTDeployment::StorageService';
}]
[file ('/'+name+'/'+machine.name+'/docker-compose.yaml', false, 'UTF-8')]
[generateCopyright()/]
[generateLicense()/]
version: "3.9"
services:
[for(c:Class|getSubClass(machine,elt))]
[if(c.getAppliedStereotype(MQTTBroker)->notEmpty())]
  [generateBroker(c,machine,'/'+name+'/'+machine.name+'/')/]
[elseif(c.getAppliedStereotype(DataDistributionService)->notEmpty())]
  [generateStorageService(c,machine)/]
[elseif(c.getAppliedStereotype(StorageService)->notEmpty())]
  [generateDataDistributionService(c,machine)/]
[elseif(c.getAppliedStereotype(ExternalService)->notEmpty())]
  [generateExternalService(c,machine)/]
[/if]
[/for]
networks:
[for(c:Class | getSubClass(machine,elt))]
  [c.name/]_net:
    driver: bridge
[/for]
[/file]
[generateSetup(name,machine)/]
[generateAnsible(name, machine,elt)/]
[/template]

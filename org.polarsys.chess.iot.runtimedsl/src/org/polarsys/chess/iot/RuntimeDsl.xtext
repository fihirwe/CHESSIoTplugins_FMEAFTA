grammar org.polarsys.chess.iot.RuntimeDsl with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/uml2/5.0.0/UML" as uml

generate runtimeDsl "http://www.polarsys.org/chess/iot/RuntimeDsl"

Deployment:
	(plan+=Expression+)*;

Expression returns Expression:
	'DepPlan:'  name=ID '{'
	('setup:'  setup=BOOLEAN)?
	('re-use-plan:'  plan=[Expression])?
	'Description:'  description=STRING
		(agent+=AbstractAgent)*
	'}';
AbstractAgent returns AbstractAgent:
	'agent:'  name=ID ('extends' superType=[AbstractAgent])? '{'
//		'machine_name:' machine_name+=STRING  //drafted from the model
//		'address:'
//			'['machine_address+=STRING (',' machine_address+=STRING)*']'//drafted from the model
		('RULE:' rule+=rule)*
	'}';

rule returns rule:
	create| start | stop | restart  | redeploy | log | rerunAgent
;

create: 
	'create' '=>' service_name=STRING 
	'on:' machine_name =STRING ; //drafted based on scope	
start:
	'start' '=>' service_name=STRING 
	'on:' machine_name =STRING ; //drafted based on scope	;
stop :
	'stop' '=>' service_name=STRING 
	'on:' machine_name =STRING ; //drafted based on scope	;
restart:
	're-start' '=>' service_name=STRING 
	'on:' machine_name =STRING ; //drafted based on scope	;
redeploy:
	're-deploy' '=>' service_name=STRING 'on:' machine_address=STRING ; //drafted based on scope
log  :
	'log' '=>' service_name=STRING 
	'log_type:' log_type=LogType
	'filename:' filename=STRING 
	'location:' location=STRING
	'on:' machine_name =STRING ; //drafted based on scope	;
rerunAgent:
	'rerun-agent' '=>' agent=[AbstractAgent] ;
	
enum LogType: MACHINE='machine' | SERVICE='service';

terminal NUMBER returns ecore::EBigDecimal:
	('0'..'9')* ('.' ('0'..'9')+)?
	;
	
enum BOOLEAN: 
	TRUE='true' | FALSE='false'
;
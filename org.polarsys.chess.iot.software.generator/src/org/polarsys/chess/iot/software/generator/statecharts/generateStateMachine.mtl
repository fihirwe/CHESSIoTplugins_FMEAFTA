[comment encoding = UTF-8 /]
[module generateStateMachine('http://www.eclipse.org/uml2/5.0.0/UML')]
[import org::polarsys::chess::iot::software::generator::services::usesUML2Services/]

[template public generateStateMachine (sm : StateMachine, owner : Component){
	IoTState : String = 'CHESSIoT::CHESSIoTSoftware::IoTState';
	IoTGeneric: String = 'CHESSIoT::CHESSIoTSoftware::Generic';
	StateTransition: String= 'CHESSIoT::CHESSIoTSoftware::StateTransition';}]
statechart [owner.name.toUpperCase()+'_SM'/] init [getInitialState(sm)/]{
[let states : Sequence(State) = sm.region.subvertex->filter(State)->asSequence()]	
[for (state : State | states)]
state [state.name/]{
	[generateStateInternals(state,IoTState,owner)/]
	[let transitions : Sequence(Transition) = sm.region.transition->select(tr : 
		Transition | not(tr.source.oclIsTypeOf(Pseudostate)) and 
			not(tr.target.oclIsTypeOf(Pseudostate)))->asSequence()]
	[for (trans:Transition | transitions)]
		[if (trans.getAppliedStereotype(StateTransition)->notEmpty())]
			[if (trans.source.name.toLowerCase()= state.name.toLowerCase())]
			transition -> [trans.target.name/] [getTransEventCheck(trans,StateTransition,owner)/]
				[generateGuards(trans, StateTransition, owner)/]
			[/if]
		[else][printMe('Wrong state transitions used in the model component '+owner.name)/]
		[/if]
	[/for]
	[/let]
	}
[/for]
[/let]
}
[/template]

[template public getTransEventCheck(trans : Transition, stereo:String, owner:Component){
	ConditionEvent : String = 'CHESSIoT::CHESSIoTSoftware::ConditionEvent';}]
[if (trans.getValue(trans.getAppliedStereotype(stereo), 'conditionalevent').toString().size()>0)]
[for(it : OclAny | trans.getValue(trans.getAppliedStereotype(stereo), 'conditionalevent'))]
event e: [for (it1 : Class | owner.allOwnedElements()->filter(Class))]
[if (it1.name = it.eGet('base_Class').oclAsType(Class).name)]
[for(newIT : OclAny | it1.getValue(it1.getAppliedStereotype(ConditionEvent), 'iotport'))][newIT.eGet('base_Port').oclAsType(Port).name/][/for]?[for(newIT : OclAny | it1.getValue(it1.getAppliedStereotype(ConditionEvent), 'payload'))][newIT.eGet('base_Class').oclAsType(Class).name/][/for][/if][/for] 
[/for][/if]
[/template]

[template public generateGuards(trans : Transition,stereo : String, owner: Component){
Guard : String = 'CHESSIoT::CHESSIoTSoftware::Guard';
IoTGenericAction: String = 'CHESSIoT::CHESSIoTSoftware::Generic';
IoTSendAction: String = 'CHESSIoT::CHESSIoTSoftware::Send';}]
[if (trans.getValue(trans.getAppliedStereotype(stereo), 'guard').toString().size()>0)]
[for(it : OclAny | trans.getValue(trans.getAppliedStereotype(stereo), 'guard'))]
[for (it1 : Class | owner.allOwnedElements()->filter(Class))]
[if (it1.name = it.eGet('base_Class').oclAsType(Class).name)]
	guard [it1.getValue(it1.getAppliedStereotype(Guard), 'condition')/]
	[if (it1.getValue(it1.getAppliedStereotype(Guard), 'action').toString().size()>0)]
	action 
	  do
	[for (it4 : OclAny | it1.getValue(it1.getAppliedStereotype(Guard), 'action'))]
	[for (it2 : Class | owner.allOwnedElements()->filter(Class))]
	[if (it2.name = it4.eGet('base_Class').oclAsType(Class).name)]
	[if (it2.getAppliedStereotype(IoTGenericAction)->notEmpty())]
	[it2.getValue(it2.getAppliedStereotype(IoTGenericAction), 'implementation')/]
	[elseif (it2.getAppliedStereotype(IoTSendAction)->notEmpty())]
	[for(newITnew : OclAny | it2.getValue(it2.getAppliedStereotype(IoTSendAction), 'port'))]
	[newITnew.eGet('base_Port').oclAsType(Port).name/][/for]![for(newITnew2 : OclAny | it2.getValue(it2.getAppliedStereotype(IoTSendAction), 'payload'))][newITnew2.eGet('base_Class').oclAsType(Class).name/]()[/for]
	[/if]
	[/if]
	[/for]
	[/for]
	  end
	[/if]
[/if]
[/for]	
[/for]
[/if]
[/template]


[template public generateStateInternals(state : State,IoTState: String, owner : Component){
	IoTGenericAction: String = 'CHESSIoT::CHESSIoTSoftware::Generic';
	InternalEvent: String ='CHESSIoT::CHESSIoTSoftware::InternalEvent';
	IoTSendAction: String = 'CHESSIoT::CHESSIoTSoftware::Send';}]
[if (state.getAppliedStereotype(IoTState)->notEmpty())]
[if(state.getValue(state.getAppliedStereotype(IoTState), 'onEntry').toString().size()>0)]
[comment]/***onEntry get some action to do onEntry***/[/comment]
on entry 
  do
[for(it : OclAny | state.getValue(state.getAppliedStereotype(IoTState), 'onEntry'))]
[for (it2 : Class | owner.allOwnedElements()->filter(Class))]
[if (it2.name = it.eGet('base_Class').oclAsType(Class).name)]
	[if (it2.getAppliedStereotype(IoTGenericAction)->notEmpty())]
	[it2.getValue(it2.getAppliedStereotype(IoTGenericAction), 'implementation')/]
	[elseif (it2.getAppliedStereotype(IoTSendAction)->notEmpty())]
	[for(newITnew : OclAny | it2.getValue(it2.getAppliedStereotype(IoTSendAction), 'port'))]
	[newITnew.eGet('base_Port').oclAsType(Port).name/][/for]![for(newITnew2 : OclAny | it2.getValue(it2.getAppliedStereotype(IoTSendAction), 'payload'))][newITnew2.eGet('base_Class').oclAsType(Class).name/]()[/for]
	[/if]
	[/if]
[/for]
[/for]
  end
[/if]
[if (state.getValue(state.getAppliedStereotype(IoTState), 'internal').toString().size()>0)]
[comment]/***internal get some events and actions to do internal***/[/comment]
[for(it : OclAny | state.getValue(state.getAppliedStereotype(IoTState), 'internal'))]
internal event [for (it1 : Class | owner.allOwnedElements()->filter(Class))]
	[if (it1.name = it.eGet('base_Class').oclAsType(Class).name)]
	[for(newIT : OclAny | it1.getValue(it1.getAppliedStereotype(InternalEvent), 'iotport'))][newIT.eGet('base_Port').oclAsType(Port).name/][/for]?[for(newIT : OclAny | it1.getValue(it1.getAppliedStereotype(InternalEvent), 'payload'))][newIT.eGet('base_Class').oclAsType(Class).name/][/for][/if][/for] 
	action 
	  do
[for (it1new : Class | owner.allOwnedElements()->filter(Class))]
[if (it1new.name = it.eGet('base_Class').oclAsType(Class).name)]
[for(newIT2 : OclAny | it1new.getValue(it1new.getAppliedStereotype(InternalEvent),'action'))]
[for (it3 : Class | owner.allOwnedElements()->filter(Class))]
[if (it3.name=newIT2.eGet('base_Class').oclAsType(Class).name)]
	[if (it3.getAppliedStereotype(IoTGenericAction)->notEmpty())]
	[it3.getValue(it3.getAppliedStereotype(IoTGenericAction), 'implementation')/]
	[elseif (it3.getAppliedStereotype(IoTSendAction)->notEmpty())]
	[for(newITnew : OclAny | it3.getValue(it3.getAppliedStereotype(IoTSendAction), 'port'))]
	[newITnew.eGet('base_Port').oclAsType(Port).name/][/for]![for(newITnew2 : OclAny | it3.getValue(it3.getAppliedStereotype(IoTSendAction), 'payload'))][newITnew2.eGet('base_Class').oclAsType(Class).name/]()[/for]
	[/if]
[/if]
[/for]
[/for]
[/if]
[/for]
	  end
[/for]  
[/if]
[if (state.getValue(state.getAppliedStereotype(IoTState), 'onExit').toString().size()>0)]
[comment]/*****block_expression for onExit actions****/[/comment]
onExit 
  do
[for(it : OclAny | state.getValue(state.getAppliedStereotype(IoTState), 'onExit'))]
[for (it2 : Class | owner.allOwnedElements()->filter(Class))]
[if (it2.name = it.eGet('base_Class').oclAsType(Class).name)]
	[if (it2.getAppliedStereotype(IoTGenericAction)->notEmpty())]
	[it2.getValue(it2.getAppliedStereotype(IoTGenericAction), 'implementation')/]
	[elseif (it2.getAppliedStereotype(IoTSendAction)->notEmpty())]
	[for(newITnew : OclAny | it2.getValue(it2.getAppliedStereotype(IoTSendAction), 'port'))]
	[newITnew.eGet('base_Port').oclAsType(Port).name/][/for]![for(newITnew2 : OclAny | it2.getValue(it2.getAppliedStereotype(IoTSendAction), 'payload'))][newITnew2.eGet('base_Class').oclAsType(Class).name/]()[/for]
	[/if]
	[/if]
[/for]
[/for]
end
[/if]
[/if]
[/template]


[template public getInitialState(sm : StateMachine)]
	[let transitions : Sequence(Transition) = sm.region.transition->select(tr : Transition | tr.source.oclIsTypeOf(Pseudostate))->asSequence()][transitions.target.name/][/let]
[/template]


[query public getOriginalName(it : OclAny) : String =  it.eGet('base_Class').oclAsType(Class).name/]


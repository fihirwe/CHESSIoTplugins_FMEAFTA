[comment encoding = UTF-8 /]
[module generateMainThing('http://www.eclipse.org/uml2/5.0.0/UML')]
[import org::polarsys::chess::iot::generator::services::usesUML2Services/]
[import org::polarsys::chess::iot::generator::statecharts::generateStateMachine/]
[import org::polarsys::chess::iot::generator::things::generateAThing /]
[import org::polarsys::chess::iot::generator::things::ThingUtilities /]
[import org::polarsys::chess::iot::generator::legal::Copyright /]
[comment][/comment]
[template public generateMainThing(component : Component, aPackage : Package)]
[file ('/model/'.concat(component.name).concat('.thingml'), false)]
[generateCopyright()/]

[comment][/comment]
import "../util/_DataTypes.thingml"
import "../util/_Timer.thingml"
import "Payloads.thingml"
[generateAthingAndImport(component, aPackage)/]

thing [component.name.toUpperFirst()/] includes _DataTypes, _Timer[includeParts(component, aPackage)/]
	{ 
		[getProperties(component, aPackage)/]

		[for (stateM:uml::StateMachine | self.allOwnedElements()-> filter(uml::StateMachine))]
			[generateStateMachine(stateM)/]
		[/for]	
	}
[comment] Gnerating the configurations code[/comment]
configuration [component.name.toUpperFirst()/]
	{
		[for(aClass : Class | aPackage.allOwnedElements()->filter(Class))] 
 		instance [aClass.name.toLowerCase()/]:[aClass.name.toUpperFirst()/]
		[/for]
		[for(aPort : Port | aPackage.allOwnedElements()->filter(Port))] 
		connector [aPort.name.toLowerCase()/].[component.name.toLowerCase()/] => [aPort.name.toLowerCase()/].[component.name.toLowerCase()/]
		[/for]
}
[/file]
[/template]
[comment]This template deals with importing and calling the generate sub components[/comment]
[template public generateAthingAndImport(component : Component, aPackage : Package)]
[for (part : Property | component.getAllAttributes())]
	[for (sub_component : Component | aPackage.allOwnedElements()->filter(Component))]
		[if (part.name.toUpperFirst()=sub_component.name)]
import "[component.name.concat('_subs/').concat(sub_component.name).concat('.thingml')/]"[generateAThing(sub_component,component,aPackage)/]
		[/if]
	[/for]
[/for]
[/template]
[comment]Fixing the includes[/comment]
[template public includeParts(component : Component, aPackage : Package)]
[for (part : Property | component.getAllAttributes())][for (sub_component : Component | aPackage.allOwnedElements()->filter(Component))][if (part.name.toUpperFirst()=sub_component.name)], [sub_component.name/][/if][/for][/for]
[/template]

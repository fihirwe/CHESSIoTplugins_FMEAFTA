/**
 * generated by Xtext 2.12.0
 */
package org.polarsys.chess.iot.runtimeDsl.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.polarsys.chess.iot.runtimeDsl.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class RuntimeDslFactoryImpl extends EFactoryImpl implements RuntimeDslFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static RuntimeDslFactory init()
  {
    try
    {
      RuntimeDslFactory theRuntimeDslFactory = (RuntimeDslFactory)EPackage.Registry.INSTANCE.getEFactory(RuntimeDslPackage.eNS_URI);
      if (theRuntimeDslFactory != null)
      {
        return theRuntimeDslFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new RuntimeDslFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RuntimeDslFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case RuntimeDslPackage.MODEL: return createModel();
      case RuntimeDslPackage.MODULE: return createModule();
      case RuntimeDslPackage.START: return createstart();
      case RuntimeDslPackage.STOP: return createstop();
      case RuntimeDslPackage.RESTART: return createrestart();
      case RuntimeDslPackage.REDEPLOY: return createredeploy();
      case RuntimeDslPackage.LOG: return createlog();
      case RuntimeDslPackage.MONITOR: return createmonitor();
      case RuntimeDslPackage.RUN: return createrun();
      case RuntimeDslPackage.USES: return createUses();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Module createModule()
  {
    ModuleImpl module = new ModuleImpl();
    return module;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public start createstart()
  {
    startImpl start = new startImpl();
    return start;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public stop createstop()
  {
    stopImpl stop = new stopImpl();
    return stop;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public restart createrestart()
  {
    restartImpl restart = new restartImpl();
    return restart;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public redeploy createredeploy()
  {
    redeployImpl redeploy = new redeployImpl();
    return redeploy;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public log createlog()
  {
    logImpl log = new logImpl();
    return log;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public monitor createmonitor()
  {
    monitorImpl monitor = new monitorImpl();
    return monitor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public run createrun()
  {
    runImpl run = new runImpl();
    return run;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Uses createUses()
  {
    UsesImpl uses = new UsesImpl();
    return uses;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RuntimeDslPackage getRuntimeDslPackage()
  {
    return (RuntimeDslPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static RuntimeDslPackage getPackage()
  {
    return RuntimeDslPackage.eINSTANCE;
  }

} //RuntimeDslFactoryImpl
